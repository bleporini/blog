<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>The Babel Tower</title>
        <description>The Babel Tower - Brice LEPORINI</description>
        <link>http://username.github.io</link>
        <link>http://username.github.io</link>
        <lastBuildDate>2014-04-25T10:48:35+02:00</lastBuildDate>
        <pubDate>2014-04-25T10:48:35+02:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>test post</title>
                <description>&lt;p&gt;Exemple de code&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;toto&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;toto&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                <link>http://username.github.io/2014/04/25/test-post</link>
                <guid>http://username.github.io/2014/04/25/test-post</guid>
                <pubDate>2014-04-25T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>XMLUnit&#58; une petite lib qui dépanne bien</title>
                <description>
&lt;div class=&quot;p1&quot;&gt;
  Aujourd'hui, vous l'aurez compris, on cause XML. Nombreux sont les syst&amp;egrave;mes d'informations qui exploitent ce format pour &amp;eacute;changer des donn&amp;eacute;es ou les structurer. XML &amp;eacute;tant assez souple dans sa repr&amp;eacute;sentation, il peut &amp;ecirc;tre difficile de valider dans les tests un r&amp;eacute;sultat obtenu par rapport &amp;agrave; un r&amp;eacute;sultat attendu. 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Bien s&amp;ucirc;r, la validation au regard du sch&amp;eacute;ma permet de faire une validation structurelle, mais &amp;agrave; ce moment l&amp;agrave; c'est votre marshaller et son int&amp;eacute;gration que vous testez et non votre application &amp;agrave; proprement parler. Si c'est le contenu et non la structure qui doit &amp;ecirc;tre v&amp;eacute;rifi&amp;eacute;, quelles sont les options? 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Vous avez &amp;agrave; disposition les moyens &amp;quot;d'unmarshaller&amp;quot; le XML et vous pouvez proc&amp;eacute;der &amp;agrave; la v&amp;eacute;rification par rapport aux objets du mod&amp;egrave;le. Pas mal, mais si c'est une grappe compl&amp;egrave;te d'objet que vous devez confronter dans un mode &amp;quot;result vs expected&amp;quot;, il va y avoir de la ligne de code et pas qu'un peu! 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Vous pouvez tenter de traiter le flux de fa&amp;ccedil;on non structur&amp;eacute;e, sans tenir compte du XML (et encore moins des outils associ&amp;eacute;s) et en se r&amp;eacute;f&amp;eacute;rant aux caract&amp;egrave;res. Ne riez pas, je l'ai vu. Et bien entendu, le moindre changement d'encodage ou de pr&amp;eacute;fix d'espace de nom rend votre test caduque. 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Vous pouvez cr&amp;eacute;er un extracteur bas&amp;eacute; sur des expressions XPath et les comparer une &amp;agrave; une. En fonction de la complexit&amp;eacute; et du volume du graphe &amp;agrave; v&amp;eacute;rifier, m&amp;ecirc;me remarque que pour la premi&amp;egrave;re option, vous allez pisser de la ligne. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;a href=&quot;http://xmlunit.sourceforge.net/&quot;&gt;XMLUnit&lt;/a&gt; est une biblioth&amp;egrave;que qui permet de proc&amp;eacute;der &amp;agrave; des comparaisons de documents XML. Ce n'est pas un projet Github (Sourceforge), le site est moche et n'utilise pas Twitter Bootstrap, l'API n'est pas sp&amp;eacute;cialement &amp;quot;fluent&amp;quot; et elle n'est pas nouvelle. Le score hype est au plus bas (jeu vous le vends bien hein?), mais il fait le job avec un minimum d'effort. Je vais &amp;eacute;viter de paraphraser la documentation, je vous invite &amp;eacute;videmment &amp;agrave; vous y r&amp;eacute;f&amp;eacute;rer, et tenter de simplement zoomer sur les points qui ont retenu mon attention. 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;div class=&quot;p1&quot;&gt;
   La base (noter l'espace sur le deuxi&amp;egrave;me arbre): 
  &lt;br /&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: java&quot;&gt;  assertXMLEqual(&amp;quot;&amp;lt;root&amp;gt;&amp;lt;value&amp;gt;test&amp;lt;/value&amp;gt;&amp;lt;/root&amp;gt;&amp;quot;,&lt;br /&gt;                &amp;quot;&amp;lt;root &amp;gt;&amp;lt;value&amp;gt;test&amp;lt;/value&amp;gt;&amp;lt;/root&amp;gt;&amp;quot;);&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
 &lt;div class=&quot;p1&quot;&gt;
   Revenons sur la premi&amp;egrave;re option: le projet comprend une couche qui permet d'int&amp;eacute;grer le document dans le mod&amp;egrave;le m&amp;eacute;tier. Mieux, les m&amp;eacute;thodes equals sont impl&amp;eacute;ment&amp;eacute;es de fa&amp;ccedil;on &amp;agrave; prendre en compte l'int&amp;eacute;gralit&amp;eacute; du graphe contenu. Du coup la comparaison en est simplifi&amp;eacute;e et en plus c'est le code de prod qui permet de faire la v&amp;eacute;rification et le test est typ&amp;eacute; m&amp;eacute;tier, &amp;eacute;videmment s'il n'y a pas match vous ne saurez pas d'o&amp;ugrave; &amp;ccedil;a vient.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;br /&gt; 
 &lt;div class=&quot;p1&quot;&gt;
   Imaginons maintenant qu'une partie des valeurs du graphe soit purement technique et difficilement reproductible, telle qu'un timestamp indiquant la date de g&amp;eacute;n&amp;eacute;ration, exit l'utilisation d'equals et il est temps de se r&amp;eacute;signer &amp;agrave; pisser du code. 
  &lt;br /&gt; 
  &lt;br /&gt; 
  &lt;br /&gt; 
  &lt;div class=&quot;p1&quot;&gt;
    C'est l&amp;agrave; qu'XMLUnit apporte un plus: il est possible d'avoir le contr&amp;ocirc;le sur les diff&amp;eacute;rences relev&amp;eacute;es par le moteur gr&amp;acirc;ce &amp;agrave; des listeners: 
  &lt;/div&gt; 
  &lt;div class=&quot;p1&quot;&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
  &lt;div class=&quot;p1&quot;&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
  &lt;pre class=&quot;brush: java&quot;&gt;        final DifferenceListener dl = new DifferenceListener() {&lt;br /&gt;            @Override&lt;br /&gt;            public int differenceFound(Difference difference) {&lt;br /&gt;                if(difference.getControlNodeDetail() == null ||&lt;br /&gt;                        difference.getControlNodeDetail().getNode() == null ||&lt;br /&gt;                        difference.getControlNodeDetail().getNode().getParentNode() == null)&lt;br /&gt;                    return RETURN_ACCEPT_DIFFERENCE;&lt;br /&gt;                else if (difference.getControlNodeDetail().getNode().getParentNode().getNodeName().equals(&amp;quot;timestamp&amp;quot;))&lt;br /&gt;                    return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;&lt;br /&gt;                return RETURN_ACCEPT_DIFFERENCE;&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            @Override&lt;br /&gt;            public void skippedComparison(Node control, Node test) { }&lt;br /&gt;        };&lt;br /&gt;&lt;br /&gt;        final Diff diff = new Diff(control, shouldBeSimilar);&lt;br /&gt;        diff.overrideDifferenceListener(dl);&lt;br /&gt;        assertXMLEqual(diff, true);&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
  &lt;div class=&quot;p1&quot;&gt; 
   &lt;br /&gt; 
   &lt;div class=&quot;p1&quot;&gt;
     Je vous ai pr&amp;eacute;par&amp;eacute; un Gist pour illustrer l'utilisation:&amp;nbsp; 
    &lt;a href=&quot;https://gist.github.com/bleporini/6315811&quot;&gt;&lt;span class=&quot;s1&quot;&gt;https://gist.github.com/bleporini/631581&lt;/span&gt;&lt;/a&gt; 
   &lt;/div&gt; 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt;
</description>
                <link>http://username.github.io/2014/02/07/XMLUnit%253A%2Bune%2Bpetite%2Blib%2Bqui%2Bd%25C3%25A9panne%2Bbien</link>
                <guid>http://username.github.io/2014/02/07/XMLUnit%3A+une+petite+lib+qui+d%C3%A9panne+bien</guid>
                <pubDate>2014-02-07T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>JVM&#58; Le prix de l'immutabilité</title>
                <description>
&lt;p&gt;Je l'avoue, durant mes vacances au bord de l'eau, entre les ap&amp;eacute;ritifs et les siestes syndicales, une question est venue me chatouiller: les &amp;eacute;vang&amp;eacute;listes de la programmation fonctionnelle nous bassinent avec les avantages de l'immutabilit&amp;eacute; mais au bout du compte &amp;ccedil;a doit pas &amp;ecirc;tre gratuit cette affaire l&amp;agrave;? Combien &amp;ccedil;a co&amp;ucirc;te? Du coup je me suis fix&amp;eacute; comme objectif pour ma rentr&amp;eacute;e de r&amp;eacute;unir des &amp;eacute;l&amp;eacute;ments permettant d'avoir un peu plus de recul sur cette question. Je vous propose de suivre ma d&amp;eacute;marche dans ce billet. &lt;/p&gt; 
&lt;p&gt;Tout d'abord, rappelons que la principale vertu de l'immutabilit&amp;eacute; est qu'un objet non modifiable peut &amp;ecirc;tre acc&amp;eacute;d&amp;eacute; par plusieurs threads sans n&amp;eacute;cessiter de verrouillage, permettant d'exclure toute situation de comp&amp;eacute;tition (race condition) sur une ressource. Il semble que cela soit une des clefs permettant de passer de la gestion de la concurrence au parall&amp;eacute;lisme. Soit, toutefois les valeurs d'un objet doivent parfois &amp;ecirc;tre modifi&amp;eacute;es, impliquant la cr&amp;eacute;ation d'une nouvelle entit&amp;eacute; immuable avec la ou les nouvelle(s) valeur(s), l'allocation d'une nouvelle instance et potentiellement la collecte de l'ancienne. C'est pr&amp;eacute;cis&amp;eacute;ment ces effets de bord qui retiennent mon attention. &lt;/p&gt; 
&lt;p&gt; Le POC prend la forme de tests unitaires dans lesquels tous les objets d'une liste sont modifi&amp;eacute;s: une case class comprenant un membre unique de type Long et l'op&amp;eacute;ration appliqu&amp;eacute;e est l'ajout du nombre de nanosecondes contenue dans une journ&amp;eacute;e. La situation est observ&amp;eacute;e sous deux angles diff&amp;eacute;rents: l'objet est modifiable et sa variable d'instance est mise &amp;agrave; jour ou l'objet est immuable et une nouvelle entit&amp;eacute; est cr&amp;eacute;&amp;eacute;e. Le langage est Scala, le code est trivial et vous pouvez le trouver les d&amp;eacute;tails sur Github (&lt;a href=&quot;https://github.com/bleporini/immutabilityCost&quot;&gt;https://github.com/bleporini/immutabilityCost&lt;/a&gt;). &lt;/p&gt; 
&lt;p&gt; Les classes: &lt;/p&gt; 
&lt;pre class=&quot;brush: scala;  &quot;&gt;  case class Immutable(date:Long)&lt;br /&gt;  case class Mutable(var date:Long)&lt;br /&gt;&lt;/pre&gt; Les fonctions de modification: 
&lt;pre class=&quot;brush: scala;  &quot;&gt;    def addOneDay(from:Immutable):Immutable= Immutable(from.date+oneDayNs)&lt;br /&gt;&lt;br /&gt;    def addOneDay(from:Mutable):Mutable={&lt;br /&gt;      from.date = from.date + oneDayNs&lt;br /&gt;      from&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt; L'application des fonctions: 
&lt;pre class=&quot;brush: scala;  &quot;&gt;mo /*la liste*/ map transformer /* la foncntion modifiante */&lt;/pre&gt; 
&lt;h3&gt;Le probl&amp;egrave;me du micro benchmark&lt;/h3&gt; 
&lt;p&gt;Le programme s'ex&amp;eacute;cute sur la JVM, un environnement d'ex&amp;eacute;cution &amp;quot;manag&amp;eacute;&amp;quot;, c'est &amp;agrave; dire qu'en plus de faire le m&amp;eacute;nage dans la m&amp;eacute;moire (Garbage Collection), la machine virtuelle, et plus particuli&amp;egrave;rement le JIT (Just In Time compiler), r&amp;eacute;alise plein de choses &amp;agrave; l'insu de notre plein gr&amp;eacute; &amp;agrave; des fins d'optimisations, comme compiler du bytecode en code natif et l'int&amp;eacute;grer dans les piles d'appel (OSR), &amp;quot;inliner&amp;quot; des m&amp;eacute;thodes, etc. Ce comportement peut contribuer de fa&amp;ccedil;on importante dans la difficult&amp;eacute; &amp;agrave; obtenir des temps d'ex&amp;eacute;cution r&amp;eacute;p&amp;eacute;tables. &lt;/p&gt; 
&lt;p&gt;Il ne me semble pas opportun de proc&amp;eacute;der &amp;agrave; un param&amp;eacute;trage hasardeux visant &amp;agrave; stabiliser les r&amp;eacute;sultats. Mon approche s'at&amp;egrave;le plut&amp;ocirc;t &amp;agrave; observer le comportement de la JVM lors de l'ex&amp;eacute;cution en boucle du test pour d&amp;eacute;terminer quand les manipulations sur le code sont stabilis&amp;eacute;es et les temps mesur&amp;eacute;s sont &amp;agrave; peu pr&amp;egrave;s constants. En gros le chrono est d&amp;eacute;clench&amp;eacute; quand la JVM est &amp;quot;chaude&amp;quot;. &lt;/p&gt; 
&lt;p&gt;En ce qui concerne le GC, je m'assure simplement en analysant les logs produits par le param&amp;egrave;tre -XX:+PrintGCDetails qu'il n'y a pas de collecte compl&amp;egrave;te qui pourrait fausser les r&amp;eacute;sultats. &lt;/p&gt; 
&lt;p&gt;Du c&amp;ocirc;t&amp;eacute; de la manipulation de code, une ex&amp;eacute;cution verbeuse (&amp;eacute;tat d'avancement sur la sortie standard) du test en boucle conjugu&amp;eacute;e &amp;agrave; l'affichage des informations de compilation (-XX:+PrintCompilation) me permet de visualiser &amp;agrave; partir de quand le code n'est plus manipul&amp;eacute;. Dans le cas &amp;eacute;tudi&amp;eacute; il faut moins d'une centaine d'it&amp;eacute;ration pour que JIT calme ses ardeurs (les 700 premi&amp;egrave;res manipulations vous sont graci&amp;eacute;es…): &lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;pre class=&quot;brush: bash;  &quot;&gt;&lt;br /&gt;[…]&lt;br /&gt;    704   75             scala.collection.Iterator$class::foreach (26 bytes)&lt;br /&gt;    704   65             scala.collection.TraversableLike$$anonfun$map$1::apply (6 bytes)   made not entrant&lt;br /&gt;    704   66             scala.collection.TraversableLike$$anonfun$map$1::apply (20 bytes)   made not entrant&lt;br /&gt;    711   76             blep.ImmutabilityTest$$anonfun$1$$anonfun$bencher$1$1::apply (9 bytes)&lt;br /&gt;    711   77             blep.ImmutabilityTest$$anonfun$1$$anonfun$bencher$1$1::apply (9 bytes)&lt;br /&gt;    713   78             blep.ImmutabilityTest$$anonfun$1::blep$ImmutabilityTest$$anonfun$$addOneDay$1 (23 bytes)&lt;br /&gt;    713   79             blep.ImmutabilityTest$Immutable::date (5 bytes)&lt;br /&gt;    713   80             blep.package$::oneDayNs (5 bytes)&lt;br /&gt;    714   81             scala.collection.TraversableLike$$anonfun$map$1::apply (6 bytes)&lt;br /&gt;    714   82             scala.collection.TraversableLike$$anonfun$map$1::apply (20 bytes)&lt;br /&gt;    720   83             java.lang.StringBuilder::append (8 bytes)&lt;br /&gt;0 nth time: 15316 us&lt;br /&gt;    723   84             scala.collection.immutable.VectorBuilder::display1 (5 bytes)&lt;br /&gt;    724   85             scala.collection.immutable.VectorBuilder::depth (5 bytes)&lt;br /&gt;    724   86             scala.collection.immutable.VectorBuilder::display0_$eq (6 bytes)&lt;br /&gt;    724   87             scala.collection.immutable.VectorPointer$class::gotoNextBlockStartWritable (757 bytes)&lt;br /&gt;    728   88             scala.collection.immutable.VectorIterator::display0_$eq (6 bytes)&lt;br /&gt;    729   89             scala.collection.immutable.VectorPointer$class::gotoNextBlockStart (336 bytes)&lt;br /&gt;    752   90             scala.collection.immutable.VectorIterator::display1 (5 bytes)&lt;br /&gt;100 nth time: 1423 us&lt;br /&gt;200 nth time: 1394 us&lt;br /&gt;300 nth time: 2639 us&lt;br /&gt;400 nth time: 1362 us&lt;br /&gt;500 nth time: 1369 us&lt;br /&gt;600 nth time: 1419 us&lt;br /&gt;&lt;/pre&gt; Le calibrage issu de ces informations conduisent &amp;agrave; effectuer l'exp&amp;eacute;rimentation dans les conditions suivantes: la liste comprend 100000 &amp;eacute;l&amp;eacute;ments, l'application de la modification est effectu&amp;eacute;e 10000 fois sur la liste, chaque it&amp;eacute;ration est chronom&amp;eacute;tr&amp;eacute;e et une moyenne globale plus une sur les 100 derni&amp;egrave;res sont calcul&amp;eacute;es. C'est un peu bourrin, mais cela permet de g&amp;eacute;n&amp;eacute;rer des r&amp;eacute;sultats assez stables. 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Dernier d&amp;eacute;tail, il est &amp;eacute;videmment important que le lanceur (SBT) &amp;quot;forke&amp;quot; la JVM pour les tests, il serait ballot que le comportement soit parasit&amp;eacute; par l'outil de build... &lt;/p&gt; 
&lt;p&gt; Je n'ai pas tenu compte des potentielles probl&amp;eacute;matiques li&amp;eacute;es au cache L1/L2/L3 du socle mat&amp;eacute;riel, si quelqu'un sait comment r&amp;eacute;colter ce genre d'informations sur Mac, merci de contribuer! &lt;/p&gt; 
&lt;p&gt; La partie la plus &amp;quot;velue&amp;quot; aura &amp;eacute;t&amp;eacute; d'ajuster les param&amp;egrave;tres de lancement dans SBT (S pour simple, vous &amp;ecirc;tes s&amp;ucirc;rs?). &lt;/p&gt; 
&lt;h3&gt;Les r&amp;eacute;sultats&lt;/h3&gt; 
&lt;p&gt;Venons en aux chiffres: &lt;/p&gt; 
&lt;table class=&quot;table&quot;&gt; 
 &lt;tbody&gt; 
  &lt;tr&gt; 
   &lt;th&gt;M&amp;eacute;thode&lt;/th&gt; 
   &lt;th&gt;It&amp;eacute;rations&lt;/th&gt; 
   &lt;th&gt;Max&lt;/th&gt; 
   &lt;th&gt;Min&lt;/th&gt; 
   &lt;th&gt;Moy&lt;/th&gt; 
   &lt;th&gt;Moy(100)&lt;/th&gt; 
   &lt;th&gt;GC Pauses&lt;/th&gt; 
   &lt;th&gt;Pauses Tot&lt;/th&gt; 
   &lt;th&gt;FGC Pauses&lt;/th&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Mutable&lt;/td&gt; 
   &lt;td&gt;10000&lt;/td&gt; 
   &lt;td&gt;34620&lt;/td&gt; 
   &lt;td&gt;951&lt;/td&gt; 
   &lt;td&gt;2505&lt;/td&gt; 
   &lt;td&gt;1111&lt;/td&gt; 
   &lt;td&gt;66&lt;/td&gt; 
   &lt;td&gt;0,52&lt;/td&gt; 
   &lt;td&gt;0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;Immutable&lt;/td&gt; 
   &lt;td&gt;10000&lt;/td&gt; 
   &lt;td&gt;45160&lt;/td&gt; 
   &lt;td&gt;1137&lt;/td&gt; 
   &lt;td&gt;4327&lt;/td&gt; 
   &lt;td&gt;1417&lt;/td&gt; 
   &lt;td&gt;126&lt;/td&gt; 
   &lt;td&gt;1,76&lt;/td&gt; 
   &lt;td&gt;0&lt;/td&gt; 
  &lt;/tr&gt; 
  &lt;tr&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
   &lt;td&gt;30 % &lt;/td&gt; 
   &lt;td&gt;20 % &lt;/td&gt; 
   &lt;td&gt;73 % &lt;/td&gt; 
   &lt;td&gt;28 % &lt;/td&gt; 
   &lt;td&gt;91 % &lt;/td&gt; 
   &lt;td&gt;238 %&lt;/td&gt; 
   &lt;td&gt;&lt;/td&gt; 
  &lt;/tr&gt; 
 &lt;/tbody&gt; 
&lt;/table&gt; 
&lt;p&gt;Ce n'est donc pas une surprise, comparativement, le GC ramasse : il se d&amp;eacute;clenche deux fois plus pour le m&amp;ecirc;me travail et g&amp;eacute;n&amp;egrave;re 3,4 fois plus de temps de pauses quand le traitement engendre de nouvelles entit&amp;eacute;s &amp;agrave; chaque modification. &lt;/p&gt; 
&lt;p&gt; Mais au fond, le r&amp;eacute;sultat qui m'int&amp;eacute;resse le plus est la diff&amp;eacute;rence au niveau du temps d'ex&amp;eacute;cution, le nerf de la guerre, l'immutabilit&amp;eacute; dure &amp;agrave; priori pas loin de 30% plus longtemps. Voil&amp;agrave;, tu t'es fait attir&amp;eacute; sur cet article au titre tendance, tu as suivi un geek qui fait mumuse avec des additions pour arriver &amp;agrave; la conclusion que g&amp;eacute;n&amp;eacute;rer plus de travail prend plus de temps… tu peux retourner voir si les specs de l'iPhone 6 n'ont pas fuit&amp;eacute;! &lt;/p&gt; 
&lt;p&gt; Plus s&amp;eacute;rieusement, le temps d'ex&amp;eacute;cution &amp;eacute;tant la finalit&amp;eacute; principale &amp;agrave; mon sens, que peut-on tirer de ce chiffre de 30%? &lt;/p&gt; 
&lt;p&gt; 30% d'augmentation du taux de ch&amp;ocirc;mage c'est consid&amp;eacute;rable et c'est une catastrophe, 30% d'augmentation de salaire, &amp;ccedil;a change la vie. En revanche un ordinateur 30% plus puissant qu'un autre &amp;ccedil;a fait pas une grosse diff&amp;eacute;rence &amp;agrave; l'utilisation et mon avis est que ce constat se transpose aux programmes informatiques. Je m'explique: quand je clique sur un bouton, que l'appli web r&amp;eacute;ponde en 100ms ou 130ms, c'est rapide pourtant il y a 30% d'&amp;eacute;cart; si au contraire quand je clique et que la r&amp;eacute;ponse arrive au bout de 10 min ou 13 min, &amp;ccedil;a rame la mort dans les deux cas! Donc 30% ce n'est pas n&amp;eacute;gligeable mais cela ne nous fait pas changer de classification: on ne passe pas de &amp;quot;&amp;ccedil;a se tra&amp;icirc;ne&amp;quot; &amp;agrave; &amp;quot;&amp;ccedil;a envoie du bois&amp;quot;. &lt;/p&gt; 
&lt;p&gt; Peut-on d&amp;egrave;s lors troller qu'adopter l'immutabilit&amp;eacute; entra&amp;icirc;ne 30% de d&amp;eacute;gradations sur les temps d'ex&amp;eacute;cution? Je vois d&amp;eacute;j&amp;agrave; le tweet ravageur: &lt;/p&gt; 
&lt;p&gt; &lt;a href=&quot;http://2.bp.blogspot.com/-c--WzkZj8-A/UhOnXuIZ_5I/AAAAAAAABEo/2yhxO1bpc-w/s1600/fake_tweet.png&quot; imageanchor=&quot;1&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;/assets/img/JVM+Le+prix+de+l_immutabilite/fake_tweet.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt; D'une part, l'exp&amp;eacute;rimentation zoome sur un point particulier et la diff&amp;eacute;rence entre les deux zones mesur&amp;eacute;es se r&amp;eacute;sume &amp;agrave; &amp;quot;allocation d'un Long et l'addition de deux Long&amp;quot; contre &amp;quot;allocation d'une instance de case class, d'un Long et addition de deux Long&amp;quot;. Le trait est forc&amp;eacute;ment grossi. &lt;/p&gt; 
&lt;p&gt;D'autre part, dans la plupart des applications, beaucoup plus de temps est potentiellement consomm&amp;eacute; dans les I/O (r&amp;eacute;seau ou disque), dans l'interrogation des syst&amp;egrave;mes de persistance, ou encore lors de la g&amp;eacute;n&amp;eacute;ration de vue ou de r&amp;eacute;ponses, etc que dans l'allocation et la collecte. Dans la vraie vie, le gain de 30% n'est &amp;eacute;videmment pas global. &lt;/p&gt; 
&lt;p&gt;De plus, si les entit&amp;eacute;s mutables de votre application sont partag&amp;eacute;es entre plusieurs threads, vous &amp;ecirc;tes vou&amp;eacute;s &amp;agrave; recourir &amp;agrave; l'utilisation de moniteurs pour synchroniser les acc&amp;egrave;s (autant en lecture qu'en &amp;eacute;criture), du coup le temps gagn&amp;eacute; sur l'immutabilit&amp;eacute; peut ais&amp;eacute;ment &amp;ecirc;tre perdu, surtout que la programmation concurrente est souvent mal ma&amp;icirc;tris&amp;eacute;e. &lt;/p&gt; 
&lt;p&gt;Sans compter que si des copies d&amp;eacute;fensives (&amp;ccedil;a m'arrive jamais…) doivent s&amp;eacute;curiser l'acc&amp;egrave;s aux membres de vos classes, l'inconv&amp;eacute;nient de la gestion de la concurrence sera cumul&amp;eacute; avec celui des allocations et collectes induites par les duplications d'objets... &lt;/p&gt; 
&lt;p&gt; Compte tenu de ces donn&amp;eacute;es, mon opinion est que l'immutabilit&amp;eacute; co&amp;ucirc;te certes plus, mais dans la plupart des situations la charge suppl&amp;eacute;mentaire induite ne sera gu&amp;egrave;re perceptible, sauf si vous avez la chance de travailler sur une application extr&amp;ecirc;mement exigeante dans laquelle la moindre latence est chass&amp;eacute;e, telle q'un automate temps r&amp;eacute;el… &lt;/p&gt;
</description>
                <link>http://username.github.io/2013/08/21/JVM%253A%2BLe%2Bprix%2Bde%2Bl%2527immutabilit%25C3%25A9</link>
                <guid>http://username.github.io/2013/08/21/JVM%3A+Le+prix+de+l%27immutabilit%C3%A9</guid>
                <pubDate>2013-08-21T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Why Scala&#58; La stack (2/2)</title>
                <description>
&lt;br /&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Passons maintenant au morceau &amp;eacute;pineux. Play est un framework web dont la particularit&amp;eacute; est d'&amp;ecirc;tre enti&amp;egrave;rement stateless, il est mu par Netty, le serveur HTTP asynchrone de RedHat. Il offre des API pour Java comme pour Scala depuis la version 2. C'est &amp;eacute;videmment cette derni&amp;egrave;re facette qui retient mon attention. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Play ne repose pas sur la sp&amp;eacute;cification Servlet (Netty non plus d'ailleurs), le seul standard auquel il semble adh&amp;eacute;rer est HTTP. Il se d&amp;eacute;compose principalement en trois couches: 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Le routeur: il d&amp;eacute;fini dans un fichier les URI pris en charge par l'application ainsi que le contr&amp;ocirc;leur associ&amp;eacute; et la fonction qui sera invoqu&amp;eacute;e. 
 &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: bash; gutter:false; &quot;&gt;GET     /                           controllers.Application.index&lt;/pre&gt; 
&lt;br /&gt;Au d&amp;eacute;but, je me suis dit que c'&amp;eacute;tait plut&amp;ocirc;t nase par rapport aux contr&amp;ocirc;leurs annot&amp;eacute;s du monde Java mais en fait cela pr&amp;eacute;sente un avantage non n&amp;eacute;gligeable: tous les acc&amp;egrave;s HTTP de l'application sont centralis&amp;eacute;s dans une seule ressource au lieu d'&amp;ecirc;tre diss&amp;eacute;min&amp;eacute;s dans le code. Ce point a attir&amp;eacute; mon attention car j'ai &amp;eacute;t&amp;eacute; r&amp;eacute;cemment sensibilis&amp;eacute; sur la s&amp;eacute;curit&amp;eacute; applicative et la ma&amp;icirc;trise des points d'entr&amp;eacute;e de l'application est un point clef. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Les contr&amp;ocirc;leurs: ils prennent la forme d'objects Scala et les fonctions sont charg&amp;eacute;es d'int&amp;eacute;grer le mod&amp;egrave;le (&amp;agrave; la charge du d&amp;eacute;veloppeur) et doivent retourner des impl&amp;eacute;mentations d'Action 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala;  &quot;&gt;def index = Action {    Ok(views.html.index(&amp;quot;Your new application is ready.&amp;quot;))  }&lt;/pre&gt; 
&lt;br /&gt;Les Action permettent de sp&amp;eacute;cifier la nature du retour: d&amp;eacute;l&amp;eacute;gation &amp;agrave; une vue, JSon, le code HTTP de la r&amp;eacute;ponse, les cookies, etc. 
&lt;br /&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  La vue: il est &amp;eacute;quip&amp;eacute; d'un moteur de templating sp&amp;eacute;cifique bas&amp;eacute; sur Scala: il supporte notamment le Currying et permet de manipuler les collections&amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Nous sommes dans la dimension fonctionnelle, donc le typage est primordial, les routes comme les vues sont donc typ&amp;eacute;es, ce ne sont pas simplement des fichiers plats &amp;eacute;valu&amp;eacute;s au runtime mais &amp;agrave; la compilation. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Somme toute, &amp;agrave; quelques diff&amp;eacute;rences identitaires pr&amp;egrave;s, c'est proche de ce dont nous avons l'habitude au niveau du paradigme. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  En plus d'application exemples plut&amp;ocirc;t riches, Play propose de cr&amp;eacute;er un squelette d'application utilisable instantan&amp;eacute;ment: 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush:bash; gutter:false;&quot;&gt;&lt;br /&gt;$ play new the-babel-tower&lt;br /&gt;       _            _&lt;br /&gt; _ __ | | __ _ _  _| |&lt;br /&gt;| '_ \| |/ _' | || |_|&lt;br /&gt;|  __/|_|\____|\__ (_)my&lt;br /&gt;|_|            |__/&lt;br /&gt;&lt;br /&gt;play! 2.1-RC1 (using Java 1.7.0_07 and Scala 2.10.0-RC1), http://www.playframework.org&lt;br /&gt;&lt;br /&gt;The new application will be created in /private/tmp/the-babel-tower&lt;br /&gt;&lt;br /&gt;What is the application name? &lt;br /&gt;&amp;gt; the-babel-tower&lt;br /&gt;&lt;br /&gt;Which template do you want to use for this new application? &lt;br /&gt;&lt;br /&gt;  1             - Create a simple Scala application&lt;br /&gt;  2             - Create a simple Java application&lt;br /&gt;&lt;br /&gt;&amp;gt; 1&lt;br /&gt;OK, application the-babel-tower is created.&lt;br /&gt;&lt;br /&gt;Have fun!&lt;br /&gt;&lt;br /&gt;$ cd the-babel-tower/&lt;br /&gt;&lt;br /&gt;$ play run&lt;br /&gt;[info] Loading project definition from /private/tmp/the-babel-tower/project&lt;br /&gt;[info] Set current project to the-babel-tower (in build file:/private/tmp/the-babel-tower/)&lt;br /&gt;&lt;br /&gt;[info] Updating {file:/private/tmp/the-babel-tower/}the-babel-tower...&lt;br /&gt;[info] Done updating.                                                             &lt;br /&gt;--- (Running the application from SBT, auto-reloading is enabled) ---&lt;br /&gt;&lt;br /&gt;[info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000&lt;br /&gt;&lt;br /&gt;(Server started, use Ctrl+D to stop and go back to the console...)&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt;La page de garde comprend une directive qui g&amp;eacute;n&amp;egrave;re une vue descriptive de l'application: 
&lt;br /&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush:scala;&quot;&gt;&lt;br /&gt;@(message: String)&lt;br /&gt;&lt;br /&gt;@main(&amp;quot;Welcome to Play 2.0&amp;quot;) {&lt;br /&gt;    &lt;br /&gt;    @play20.welcome(message)&lt;br /&gt;    &lt;br /&gt;} &lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt;Je ne sais pas pour vous, mais moi &amp;ccedil;a m'a fait penser au fameux phpinfo(). Et bien tout &amp;ccedil;a, &amp;ccedil;a roxxe car dans le d&amp;eacute;veloppement d'applications web en java, maven permet de faire appel &amp;agrave; une myriade de templates d'applications, mais &amp;agrave; chaque fois que j'en ai essay&amp;eacute; un, j'ai trouv&amp;eacute; des d&amp;eacute;pendances et des configurations dont je n'avais pas n&amp;eacute;cessairement besoin me contraignant &amp;agrave; un peu de m&amp;eacute;nage. Du coup, quand je d&amp;eacute;marre un projet j'ai pris l'habitude d'un simple archetype:create que je compl&amp;egrave;te manuellement. Play pose l'essentiel, c'est fonctionnel et n'attend que votre code. 
&lt;br /&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Back to basics.&amp;nbsp;&lt;/b&gt;&lt;/span&gt;Play est tr&amp;egrave;s proche des couches basses. Il est ais&amp;eacute; de positionner des headers, des cookies ou le code de retour. Il affiche se destiner au d&amp;eacute;veloppement d'applications massivement sollicit&amp;eacute;es et hautement scalables, du coup la philosophie n'est pas d'empiler les couches d'abstractions au dessus de HTTP et de HTML &amp;agrave; l'oppos&amp;eacute; d'autres frameworks MVC, comme si pour tirer le meilleur parti d'une infrastructure le d&amp;eacute;veloppeur devait ma&amp;icirc;triser toutes les couches. En tant que geek, m&amp;ecirc;me si c'est une v&amp;eacute;rit&amp;eacute; de La Palice, j'abonde en ce sens et j'aime avoir du contr&amp;ocirc;le sur les couches basses. 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Le revers de la m&amp;eacute;daille est qu'il ne faut pas s'attendre &amp;agrave; une galaxie de composants &amp;agrave; la PrimeFaces, offrant des fonctionnalit&amp;eacute;s riches pour un minimum d'efforts, comme s'il y avait une relation invers&amp;eacute;e entre rapidit&amp;eacute; de d&amp;eacute;veloppement et poids sur l'environnement d'ex&amp;eacute;cution… Le salut passe donc par Twitter Bootstrap (ou autre pour les HTML Heroes). 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  C'est d'ailleurs ce qui m'a encourag&amp;eacute; &amp;agrave; &amp;eacute;vincer le moteur de templating de Play: j'ai mis&amp;eacute; sur du HTML statique compl&amp;eacute;t&amp;eacute; par du MVC client (Angular) et ai pris le parti d'exploiter Play qu'au travers de requ&amp;ecirc;tes REST. Comme d&amp;eacute;j&amp;agrave; argument&amp;eacute; dans un autre billet, si l'architecture est sans &amp;eacute;tat, autant d&amp;eacute;l&amp;eacute;guer la charge de g&amp;eacute;n&amp;eacute;ration des vue au client, sa CPU est gratuite pour l'application! 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  C'est dit et redit, Play est stateless, ce qui implique qu'aucune donn&amp;eacute;e li&amp;eacute;e &amp;agrave; la session applicative ne figure dans la m&amp;eacute;moire du serveur, pas m&amp;ecirc;me l'authentification. D'ailleurs pour faire simple il n'y a aucune API int&amp;eacute;gr&amp;eacute;e de contr&amp;ocirc;le d'acc&amp;egrave;s et de gestion des r&amp;ocirc;les! Les donn&amp;eacute;es de session sont stock&amp;eacute;es dans un cookie de type session sign&amp;eacute;: il n'est pas forgeable et permet &amp;agrave; chacune des instances de l'application de valider le cookie pr&amp;eacute;sent&amp;eacute; gr&amp;acirc;ce &amp;agrave; une clef de cryptage partag&amp;eacute;e. Cela implique que l'utilisation de la session applicative est totalement diff&amp;eacute;rente d'une application web stateful, exit les objets vomis dans la session sous peine de voir le poids des transferts s'envoler et les temps de r&amp;eacute;ponse s'effondrer. D&amp;eacute;cid&amp;eacute;ment, le profil du d&amp;eacute;veloppeur &amp;eacute;ligible se distingue de plus en plus de celui rencontr&amp;eacute; commun&amp;eacute;ment pour le d&amp;eacute;veloppement des applications d'entreprise… 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Revenons sur un point: pas d'API de s&amp;eacute;curit&amp;eacute; int&amp;eacute;gr&amp;eacute;e, enfin j'exag&amp;egrave;re il y a un object (play.api.mvc.Security) offrant deux fonctions. Security ne suffit pas et d'ailleurs le sample Zentasks guide tout de m&amp;ecirc;me les newbies tels que moi en proposant une trait &amp;agrave; ajouter aux contr&amp;ocirc;leurs des ressources soumises &amp;agrave; contr&amp;ocirc;le d'acc&amp;egrave;s: elle v&amp;eacute;rifie l'authentification comme le p&amp;eacute;rim&amp;egrave;tre de l'utilisateur sur l'application. Dans ses moments l&amp;agrave;, malgr&amp;eacute; les efforts investis sur le langage, il devient clair que pouvoir lire ais&amp;eacute;ment du code Scala &amp;eacute;crit par autrui va prendre encore un peu de temps, m&amp;ecirc;me si apr&amp;egrave;s coup, les concepts s'av&amp;egrave;rent faciles &amp;agrave; int&amp;eacute;grer. Je vous invite &amp;agrave; consulter le code de Zentasks ( 
 &lt;a href=&quot;https://github.com/playframework/Play20/blob/master/samples/scala/zentasks/app/controllers/Application.scala#L70&quot;&gt;https://github.com/playframework/Play20/blob/master/samples/scala/zentasks/app/controllers/Application.scala#L70&lt;/a&gt;). Le guide de r&amp;eacute;f&amp;eacute;rence de la version pr&amp;eacute;c&amp;eacute;dente de cite &amp;eacute;galement un plugin tiers (Deadbolt), j'ai pr&amp;eacute;f&amp;eacute;r&amp;eacute; ne pas miser sur cette extension, il m'a paru &amp;eacute;vident qu'une mont&amp;eacute;e de version du framework pourrait ne pas forc&amp;eacute;ment &amp;ecirc;tre suivie par ses extensions, d'autant que l'histoire a d&amp;eacute;montr&amp;eacute; que la compatibilit&amp;eacute; ascendante n'&amp;eacute;tait pas une priorit&amp;eacute; de Play. Co&amp;iuml;ncidence: la mention vers ce plugin n'existe plus dans la documentation 2.1, d'ailleurs le chapitre sur la s&amp;eacute;curit&amp;eacute; a disparu… JSR-250 and @RolesAllowed, I miss you! 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  J'ai d&amp;eacute;cid&amp;eacute; de b&amp;acirc;tir sur une conception REST, il va donc me falloir du JSON. En Java c'est cool: JAXB, Jackson et POJO annot&amp;eacute;s, le sujet est trait&amp;eacute;. Avec Play, ce n'est pas beaucoup plus compliqu&amp;eacute; mais c'est moche: il int&amp;egrave;gre &amp;eacute;galement Jackson mais l'utilisation est programmatique (bas&amp;eacute; sur des maps) au lieu d'&amp;ecirc;tre d&amp;eacute;clarative: 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush:scala;&quot;&gt;&lt;br /&gt;Json.obj(&lt;br /&gt;  &amp;quot;users&amp;quot; -&amp;gt; Json.arr(&lt;br /&gt;    Json.obj(&lt;br /&gt;      &amp;quot;name&amp;quot; -&amp;gt; &amp;quot;bob&amp;quot;,&lt;br /&gt;      &amp;quot;age&amp;quot; -&amp;gt; 31,&lt;br /&gt;      &amp;quot;email&amp;quot; -&amp;gt; &amp;quot;bob@gmail.com&amp;quot;     &lt;br /&gt;    ),&lt;br /&gt;    Json.obj(&lt;br /&gt;      &amp;quot;name&amp;quot; -&amp;gt; &amp;quot;kiki&amp;quot;,&lt;br /&gt;      &amp;quot;age&amp;quot; -&amp;gt; 25,&lt;br /&gt;      &amp;quot;email&amp;quot; -&amp;gt; JsNull     &lt;br /&gt;    )&lt;br /&gt;  )&lt;br /&gt;)&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt;L'avantage est que la transformation n'est pas soud&amp;eacute;e &amp;agrave; un mod&amp;egrave;le. 
&lt;br /&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  J'ai parl&amp;eacute; de Slick pr&amp;eacute;c&amp;eacute;demment et l'int&amp;eacute;gration se fait sans surprise, manuellement! Avec le cake pattern. Il y a n&amp;eacute;anmoins un projet d'int&amp;eacute;gration que je n'ai pas test&amp;eacute; ( 
 &lt;a href=&quot;https://github.com/freekh/play-slick&quot;&gt;https://github.com/freekh/play-slick&lt;/a&gt;) 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  C'est la tendance, pour rationaliser les threads, les requ&amp;ecirc;tes http sont servies de fa&amp;ccedil;on asynchrone. Toutefois Play brouille un peu les pistes car il permet que le contenu de l'action du contr&amp;ocirc;leur soit lui m&amp;ecirc;me asynchrone (li&amp;eacute;e &amp;agrave; des I/O, charge transf&amp;eacute;r&amp;eacute;e &amp;agrave; un backend, ou d&amp;eacute;l&amp;eacute;gu&amp;eacute; &amp;agrave; un autre pool de threads): 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush:scala;&quot;&gt;&lt;br /&gt;def index = Action {&lt;br /&gt;  val futureInt = scala.concurrent.Future { intensiveComputation() }&lt;br /&gt;  Async {&lt;br /&gt;    futureInt.map(i =&amp;gt; Ok(&amp;quot;Got result: &amp;quot; + i))&lt;br /&gt;  }&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Du coup de prime abord, on est en droit de se poser en toute bonne fois une question parfaitement fausse: pourquoi les actions ne sont elles pas asynchrones par d&amp;eacute;faut comme peut le proposer Grizzly (embarqu&amp;eacute; dans Glassfish)? Mais pas de doute, Play traite bel et bien les requ&amp;ecirc;tes de fa&amp;ccedil;on asynchrone par d&amp;eacute;faut, vous en trouverez l'explication d&amp;eacute;taill&amp;eacute;e&amp;nbsp; 
 &lt;a href=&quot;https://groups.google.com/forum/#!topic/play-framework-dev/30MqnKDp0Fs/discussion&quot;&gt;ici&lt;/a&gt; . 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Play revendique &amp;ecirc;tre destin&amp;eacute; au d&amp;eacute;veloppement des applications web modernes, &amp;agrave; ce titre il documente les types de restitutions un peu particuliers comme les r&amp;eacute;ponses par morceaux (chunked responses), les comets sockets et les web sockets. Tout &amp;ccedil;a c'est tr&amp;egrave;s geek et permet de pousser des donn&amp;eacute;es du serveur vers le navigateur. C'est &amp;eacute;videmment tr&amp;egrave;s appr&amp;eacute;ci&amp;eacute;. Ce qu'il l'est moins c'est l'API associ&amp;eacute;e: les Enumerator, Enumeratee and co. Toutefois, ce n'est pas parce que je trouve la conception indigeste qu'elle est mauvaise et je pars du postulat que les gens qui s'aventurent &amp;agrave; &amp;eacute;crire des frameworks sont forc&amp;eacute;ment brillants, mais quand je suis tomb&amp;eacute; sur un article titr&amp;eacute; 
 &lt;a href=&quot;http://mandubian.com/2012/08/27/understanding-play2-iteratees-for-normal-humans/&quot;&gt;&amp;quot;Understanding Play2 Iteratees for Normal Humans&amp;quot;&lt;/a&gt;, je me suis dit que je n'avais pas du &amp;ecirc;tre le seul… J'ai un peu transpir&amp;eacute; mais j'ai fini par r&amp;eacute;ussir &amp;agrave; utiliser cette API. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Pour continuer sur l'aspect 'application moderne', Play 2 g&amp;egrave;re les sources CoffeeScript et LESS CSS. C'est cool d'autant que si le code contient une erreur de 'transpilation', elle est identifi&amp;eacute;e et mise en forme dans le navigateur (il fait mieux qu'IntelliJ sur ce point l&amp;agrave;!).&amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Les modifications du code prises en compte &amp;agrave; chaud en mode d&amp;eacute;veloppement est un autre point positif de Play. Cela change par rapport &amp;agrave; Java, car sans JRebel, il faut s'en remettre aux limites du hot code replace du compilateur, ou encore param&amp;eacute;trer le conteneur pour scanner les diff&amp;eacute;rences et red&amp;eacute;ployer l'application le cas &amp;eacute;ch&amp;eacute;ant. Le co&amp;ucirc;t de la compilation des classes Scala est largement compens&amp;eacute; par le fonctionnement automatique, de plus le serveur ne conservant pas l'&amp;eacute;tat des clients, c'est transparent c&amp;ocirc;t&amp;eacute; navigateur. Un bon point. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Alors finalement, apr&amp;egrave;s ce floril&amp;egrave;ge de points tant&amp;ocirc;t &amp;agrave; l'avantage de Play et tant&amp;ocirc;t pas, que puis-je proposer comme conclusion? D'abord, a-t-il sa place dans la galaxie des frameworks web? Oui assur&amp;eacute;ment, car j'ai d&amp;eacute;cr&amp;eacute;t&amp;eacute; pr&amp;eacute;c&amp;eacute;demment que Scala avait la sienne dans l'&amp;eacute;cosyst&amp;egrave;me et il faut une technologie web qui repose sur ce langage. Mais du coup Play 2 Scala, c'est pour qui? M&amp;ecirc;me r&amp;eacute;ponse que pour Scala: pour des d&amp;eacute;veloppeurs murs ou de jeunes stars. 
 &lt;span style=&quot;font-size: large;&quot;&gt;&lt;b&gt;Simple ou simpliste?&lt;/b&gt;&lt;/span&gt; Il y a un dogme sur lequel j'aimerais m'attarder, Play est souvent qualifi&amp;eacute; de 'stack l&amp;eacute;g&amp;egrave;re' et du coup on a l'impression que tout est facile et rapide. Alors on l'a d&amp;eacute;montr&amp;eacute;, c'est rapidement pr&amp;ecirc;t &amp;agrave; coder, c'est l&amp;eacute;ger &amp;agrave; h&amp;eacute;berger mais la productivit&amp;eacute; ne me semble pas au rendez-vous, en tous cas au niveau des IHM, le budget d&amp;eacute;veloppement le plus important d'un projet web: pas ou peu de composants ou autre taglib, il faut taper du HTML et du Javascript, c'est &amp;eacute;videmment tendance mais s&amp;ucirc;rement pas productif. Donc l&amp;eacute;g&amp;egrave;re implique &amp;eacute;galement l&amp;eacute;g&amp;egrave;re en fonctionnalit&amp;eacute;s! Ces &amp;eacute;l&amp;eacute;ments nous apporte la r&amp;eacute;ponse &amp;agrave; la question 'dans quel contexte utiliser Play?': s'il faut des stars et que c'est long &amp;agrave; d&amp;eacute;velopper, eh bien pas pour le d&amp;eacute;veloppement web d'entreprise d&amp;eacute;j&amp;agrave;! D'autant que j'ai vu des applications JSF 1.2 cod&amp;eacute;es moyennement se comporter correctement jusqu'&amp;agrave; 900 utilisateurs concurrents sur un noeud modeste avec une JVM 32bits, donc avant d'avoir un besoin des atouts de Play, il faut &amp;ecirc;tre s&amp;ucirc;r d'avoir une activit&amp;eacute; soutenue, ou avoir un budget d'h&amp;eacute;bergement faible et des capacit&amp;eacute;s en d&amp;eacute;veloppement (du temps et pas d'argent… PME ou artisanat, non?). Ce qui me pousse &amp;agrave; penser qu'il est r&amp;eacute;solument taill&amp;eacute; pour le web, le vrai, pas l'intranet, et m&amp;ecirc;me pour le Cloud (alerte #buzzword) vu son app&amp;eacute;tit d'oiseau en ressources mat&amp;eacute;rielles, d'ailleurs l'&amp;eacute;diteur ne s'y trompe pas et propose de d&amp;eacute;ployer chez diff&amp;eacute;rents fournisseurs en quelques commandes l'application fra&amp;icirc;chement g&amp;eacute;n&amp;eacute;r&amp;eacute;e. &amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Voil&amp;agrave;, c'est la fin de mon p&amp;eacute;riple en Fonctionnalie. J'&amp;eacute;tais parti plein d'espoirs fond&amp;eacute;s sur ces technologies alternatives, qu'en reste-t-il aujourd'hui? J'ai pris du plaisir &amp;agrave; coder d'une autre mani&amp;egrave;re, Scala m'a montr&amp;eacute; de nouveaux horizons et oblig&amp;eacute; &amp;agrave; revoir des algorithmes de base et &amp;ccedil;a rafra&amp;icirc;chit lorsque le quotidien est meubl&amp;eacute; par de la &amp;quot;tuyauterie&amp;quot;. La pile propos&amp;eacute;e m'a demand&amp;eacute; de me rapprocher des couches basses et j'ai kiff&amp;eacute;. Ca c'est pour le c&amp;ocirc;t&amp;eacute; geek. Maintenant si on devait m'annoncer que mon karma &amp;eacute;tait de ne jamais pouvoir programmer avec ces outils que me manquerait-il le plus? Les lambdas et la fluidit&amp;eacute; de l'API des collections, les case classes, le pattern matching et l'Option. Voil&amp;agrave; pour le langage, mais du c&amp;ocirc;t&amp;eacute; des frameworks, Slick est fun mais actuellement d&amp;eacute;cevant et JPA est ma&amp;icirc;tris&amp;eacute; et complet (l'une des specs les plus importantes de JavaEE); Play est hype, agr&amp;eacute;able mais ne r&amp;eacute;volutionne pas et j'ai l'impression que le d&amp;eacute;funt Struts 1 &amp;eacute;tait plus riche! De plus Play est stateless, mais il n'est que stateless; or si les technos web du JCP s'appuient sur des conceptions stateful, il reste n&amp;eacute;anmoins possible de d&amp;eacute;velopper des applications sans &amp;eacute;tat avec les frameworks habituels. &amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  En anticipant &amp;agrave; peine, Java8, ses lambdas et son API Stream conjugu&amp;eacute;s &amp;agrave; Lombok (pour donner aux beans la concision des case classes mais pas toutes leurs fonctionnalit&amp;eacute;s)&amp;nbsp; et &amp;agrave; L'Optional de Guava&amp;nbsp; apparaissent &amp;ecirc;tre des palliatifs acceptables... en tous cas en attendant de voir si la stack autour de Scala arrive &amp;agrave; se d&amp;eacute;mocratiser. 
&lt;/div&gt;
</description>
                <link>http://username.github.io/2013/04/19/Why%2BScala%253A%2BLa%2Bstack%2B%25282%252F2%2529</link>
                <guid>http://username.github.io/2013/04/19/Why+Scala%3A+La+stack+%282%2F2%29</guid>
                <pubDate>2013-04-19T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Retour sur DevoxxFr 2013</title>
                <description>
&lt;br /&gt; 
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt; 
 &lt;a href=&quot;http://www.devoxx.com/plugins/servlet/builder/resource/DEVOXX2012/devox-logo.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://www.devoxx.com/plugins/servlet/builder/resource/DEVOXX2012/devox-logo.png&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Les cast codeurs viennent de nous dire au revoir, c'est le signal de cl&amp;ocirc;ture de cette &amp;eacute;dition 2013 de Devoxx France… Je vais vous tenter de vous livrer mes impressions encore ti&amp;egrave;des et vous propose de partager les faits qui m'ont marqu&amp;eacute; au cours de ces trois jours intenses! 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;On n'attire pas les mouches avec du vinaigre.&amp;nbsp;&lt;/span&gt;&lt;/b&gt;Nous, les geeks de 2013, avons la chance d'&amp;eacute;voluer &amp;agrave; une &amp;eacute;poque au cours de laquelle il semble que la demande soit inf&amp;eacute;rieure aux offres d'emploi tandis que les autres corporations traversent la crise. Rappelons que cela n'a pas toujours &amp;eacute;t&amp;eacute; le cas, car il y a maintenant une douzaine d'ann&amp;eacute;es, lorsque les caps du passage &amp;agrave; l'euro et Y2K ont &amp;eacute;t&amp;eacute; pass&amp;eacute;s, la bulle internet a &amp;eacute;clat&amp;eacute; et le march&amp;eacute; est devenu assez terne durant quelques ann&amp;eacute;es. S&amp;eacute;quence &amp;quot;nostalgie qui ne me rajeunit pas&amp;quot; et &amp;quot;j'appr&amp;eacute;cie ce que j'ai&amp;quot;. Donc un nombre important de stands &amp;eacute;taient tenus par des entreprises qui exposaient autant pour proposer leurs services que pour faire leurs emplettes sur le march&amp;eacute; des consultants. Et comment attirer l'attention des membres d'une population majoritairement masculine? Avec de charmantes managers, commerciales ou encore charg&amp;eacute;e de recrutement. Oui Mr GONCALVES, chevalier blanc tout de 
 &lt;span class=&quot;s1&quot;&gt; 
  &lt;strike&gt;
    rose 
  &lt;/strike&gt;&lt;/span&gt; noir v&amp;ecirc;tu, apr&amp;egrave;s le 
 &lt;a href=&quot;http://antoniogoncalves.org/2013/02/21/sony-your-business-is-going-down-is-it-a-reason-to-play-with-women/&quot;&gt;proc&amp;egrave;s d'intention dress&amp;eacute; contre Sony&lt;/a&gt; au sujet d'une affiche misogyne d'un gout douteux, j'attends un nouveau plaidoyer pour d&amp;eacute;noncer l'instrumentalisation de la femme &amp;agrave; Devoxx! 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt; 
 &lt;a href=&quot;https://pbs.twimg.com/media/BGmE4TECIAExMPC.jpg:small&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;https://pbs.twimg.com/media/BGmE4TECIAExMPC.jpg:small&quot; width=&quot;240&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Goodies. &lt;/span&gt;&lt;/b&gt;Ne stigmatisons pas il n'y avait pas que &amp;ccedil;a pour attirer le geek sur les stands. Et tradition oblige, pour r&amp;eacute;colter des contacts les exposants nous ont distribu&amp;eacute; des t-shirts, des mugs, des clefs USB, des autocollants, des lingettes, des bo&amp;icirc;tes &amp;agrave; meuh, de la bi&amp;egrave;re &amp;agrave; la pression, des friandises et des d&amp;eacute;capsuleurs! D'ailleurs je d&amp;eacute;cerne la palme du Goody &amp;agrave; RedHat pour son d&amp;eacute;capsuleur OpenShift qui est bien sup&amp;eacute;rieur &amp;agrave; celui d'Oracle puisque celui-ci a en plus une capacit&amp;eacute; de 4Go. J'aurais pay&amp;eacute; pour l'avoir et il ne m'a co&amp;ucirc;t&amp;eacute; que mon adresse mail. Bref une belle ambiance. 
&lt;/div&gt; 
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt; 
 &lt;a href=&quot;http://4.bp.blogspot.com/-nYSG_oyuAPw/UVgX0VyTI2I/AAAAAAAAAls/IvL_yUvQQDc/s1600/Photo+du+30-03-13+a%CC%80+07.18.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;280&quot; src=&quot;/assets/img/Retour+sur+DevoxxFr+2013/Photo+du+30-03-13+a+07.18.jpg&quot; width=&quot;320&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;Un parfum d'USI? &lt;/span&gt;&lt;/b&gt;La premi&amp;egrave;re keynote de cette ann&amp;eacute;e a &amp;eacute;t&amp;eacute; une surprise avec une r&amp;eacute;trospective sur l'histoire des &amp;eacute;critures. Clarisse Herrenschmidt a balay&amp;eacute; devant nous 6000 ans d'&amp;eacute;volutions des signes pour nous amener habilement &amp;agrave; r&amp;eacute;fl&amp;eacute;chir sur la transition dont nous sommes les acteurs. Ca m'a fait penser &amp;agrave; la&amp;nbsp; conf&amp;eacute;rence de Michel SERRES &amp;agrave; l'USI. En tout cas une tr&amp;egrave;s bonne id&amp;eacute;e.&amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Ensuite, Stephan JANSEN nous a pr&amp;eacute;sent&amp;eacute; la finalisation de la transition Flash vers HTML5 sur Parleys. Ca d&amp;eacute;chire le pr&amp;eacute;puce… S'il subsistaient dans la salle des HTML5 sceptiques, il y a fort &amp;agrave; parier qu'il y en a un peu moins aujourd'hui. 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Devoxx a &amp;eacute;galement accueilli Martin ODERSKY, invit&amp;eacute; de marque puisqu'il n'est autre que le &amp;quot;papa&amp;quot; de Scala. L&amp;agrave; les choses ont &amp;eacute;t&amp;eacute; diff&amp;eacute;rentes… J'en ai d&amp;eacute;j&amp;agrave; parl&amp;eacute;, Scala a tendance &amp;agrave; diviser et ce talk ne me para&amp;icirc;t pas avoir arrang&amp;eacute; les choses. Rapidement des slides sont apparues mettant dos &amp;agrave; dos du code Scala et Java pour mettre en valeur la concision du premier face &amp;agrave; la verbosit&amp;eacute; de second. Quand il finit par avancer que les adeptes de la programmation fonctionnelle et ceux de l'orient&amp;eacute; objet pourraient &amp;ecirc;tre r&amp;eacute;unis s'ils d&amp;eacute;veloppaient en Scala, je me suis lev&amp;eacute; et je suis parti. Mr ODERSKY, j'aime le vent de fra&amp;icirc;cheur qu'apporte votre langage dans le paysage mais j'ai d&amp;eacute;test&amp;eacute; votre keynote.&amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Mon DevoxxFr 2013 s'est compos&amp;eacute; essentiellement de conf&amp;eacute;rences et elles furent pour la plupart riches et les th&amp;egrave;mes pr&amp;eacute;sent&amp;eacute;s confirment les tendances hype: technos front avec HTML5 et JS (un zeste de Dart et TypeScript), DevOps, Cloud, programmation fonctionnelle, Big Data et &amp;eacute;videmment tout ce qui touche au langage Java et &amp;agrave; JavaEE puisqu'ils font &amp;eacute;videmment partie des fondamentaux. A noter qu'un virus s'est r&amp;eacute;pandu dans les diff&amp;eacute;rents sujets, le Raspberry Pi: Java Fx sur Pi, WAS sur Pi, piloter un Pi avec un minitel et j'en passe… j'ai eu l'impression de voir le remix de la collection des &amp;quot;Martine&amp;quot; dans lequel l'h&amp;eacute;ro&amp;iuml;ne aurait c&amp;eacute;d&amp;eacute; sa place &amp;agrave; l'ordinateur &amp;agrave; 20$. &amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  &amp;nbsp;Et au passage, j'aimerais t&amp;eacute;moigner de la qualit&amp;eacute; de la s&amp;eacute;lection des talks &amp;quot;ind&amp;eacute;pendants&amp;quot; car tous ces sujets ne m'ont pas forc&amp;eacute;ment int&amp;eacute;ress&amp;eacute; mais ils pr&amp;eacute;sentaient en moyenne une qualit&amp;eacute; &amp;eacute;lev&amp;eacute;e et il y en avait pour tous les niveaux. Je pr&amp;eacute;cise &amp;quot;ind&amp;eacute;pendants&amp;quot; (ne veux pas dire men&amp;eacute;s par des free-lances) car il y avait &amp;eacute;galement les &amp;quot;partner slots&amp;quot;: des confs qui sont r&amp;eacute;serv&amp;eacute;s pour les entreprises qui sponsorisent l'&amp;eacute;v&amp;egrave;nement. Et l&amp;agrave; il y a eu des #fails &amp;agrave; mon go&amp;ucirc;t. DevoxxFr est une conf de techos: ils veulent voir du code et m&amp;ecirc;me du live coding, du protocole, de l'ex&amp;eacute;cution, mais pas une plaquette produit export&amp;eacute;e au format PowerPoint. Pire certains l'ont visiblement fait en connaissance de cause pariant sauver les meubles avec un titre racoleur genre &amp;quot;les secrets d'optimisation de performance d'un superhero&amp;quot;, et paf des features tout le long. Sanction: je me l&amp;egrave;ve et je pars. Messieurs les sponsors, je ne milite &amp;eacute;videmment pas pour une &amp;eacute;viction des partner slots, vos solutions sont loin d'&amp;ecirc;tre d&amp;eacute;nu&amp;eacute;es d'int&amp;eacute;r&amp;ecirc;t mais j'attends de la d&amp;eacute;mo, du log ou de la capture de trame, bref je veux que vous me mettiez le nez sous le capot&amp;nbsp; avant de montrer la valeur de votre produit. DevoxxFr est, pour nous les informaticiens, l'occasion de collecter du savoir, nous ne pouvons pas nous contenter d'un spot pub de 50 minutes. J'ai &amp;eacute;chang&amp;eacute; avec d'autres participants et mon n'avis n'est pas isol&amp;eacute;, j'ai m&amp;ecirc;me entendu &amp;quot;quand je vois que c'est un partner slot, je n'y vais m&amp;ecirc;me pas&amp;quot;. Il para&amp;icirc;t n&amp;eacute;cessaire que la copie soit revue et que vous partagiez avec nous. Si un boycott se g&amp;eacute;n&amp;eacute;ralisait, tout le monde serait perdant. Notons que je n'ai pas particip&amp;eacute; &amp;agrave; tous les talks sponsoris&amp;eacute;s et que j'en ai vu certains qui r&amp;eacute;pondaient &amp;agrave; mes exigences, tous ne s'inscrivent donc pas dans cette d&amp;eacute;marche. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;b&gt;&lt;span style=&quot;font-size: large;&quot;&gt;&amp;quot;Compile once, run everywhere&amp;quot;&amp;nbsp;&lt;/span&gt;&lt;/b&gt;Depuis 1995 on nous raconte une belle histoire en vantant les m&amp;eacute;rites de cette technologie qui pose une couche d'abstraction entre le mat&amp;eacute;riel et le code source. Aujourd'hui l'abstraction propos&amp;eacute;e par la programmation fonctionnelle nous &amp;eacute;loigne encore un peu plus du hardware. Parmi tous les speakers, j'ai trouv&amp;eacute; un extra terrestre: Martin THOMPSON. Pourquoi un extra terrestre? Eh bien ses propos sont anachroniques mais remettent clairement en question ce d&amp;eacute;tachement: comment &amp;eacute;viter des invalidation de cache de CPU (avec du padding), les gains apport&amp;eacute;s par un mod&amp;egrave;le m&amp;eacute;moire pr&amp;eacute;voyant d'exploiter des segments contigus, les lenteurs identifi&amp;eacute;es tardivement &amp;agrave; cause de diff&amp;eacute;rences entre la plateforme de d&amp;eacute;veloppement et l'environnement d'exploitation et j'en passe. Tout est donc bouscul&amp;eacute;. Si le tuning que nous devons apporter &amp;agrave; notre code tient compte de ces consid&amp;eacute;rations, il devient par l&amp;agrave; m&amp;ecirc;me sp&amp;eacute;cifique &amp;agrave; une architecture mat&amp;eacute;rielle et me voil&amp;agrave; dans une conf&amp;eacute;rence en 2013 qui pr&amp;eacute;sente des concepts qui sont orthogonaux avec la gen&amp;egrave;se m&amp;ecirc;me de Java. Qu'en penser? Tout d'abord les unit&amp;eacute;s de temps manipul&amp;eacute;es par THOMPSON sont le nombre de cycles d'horloge et les nano secondes, et il se r&amp;eacute;f&amp;egrave;re au nombre d'instructions assembleur ex&amp;eacute;cut&amp;eacute;es par cycle pour appr&amp;eacute;cier la performance d'un programme. Je ne sais pas pour vous mais de mon c&amp;ocirc;t&amp;eacute;, on me demande de m'int&amp;eacute;resser &amp;agrave; des probl&amp;egrave;mes de lenteur quand l'effet sur l'exp&amp;eacute;rience utilisateur engendre des attentes de plusieurs secondes (voire minutes!). Du coup les invocations de m&amp;eacute;thode que je chasse affichent une dur&amp;eacute;e de l'ordre de la centaine de milli secondes. Ces &amp;eacute;carts &amp;eacute;normes dans nos pr&amp;eacute;occupations respectives sont directement li&amp;eacute;s &amp;agrave; la diff&amp;eacute;rence de nos univers: mon quotidien est l'informatique de gestion: un client l&amp;eacute;ger, un serveur d'app, une base de donn&amp;eacute;es, des services web et les caches qui m'int&amp;eacute;ressent stockent des objets m&amp;eacute;tiers et pas des octets (enfin pas directement). En gros des I/O, de la s&amp;eacute;rialisation, du parsing, des algos assez pauvres, bref &amp;eacute;norm&amp;eacute;ment de tuyauterie pla&amp;ccedil;ant mes pr&amp;eacute;occupations dans des sph&amp;egrave;res nettement moins exigeantes que les siennes. Mais merci &amp;agrave; lui de nous rappeler cette r&amp;eacute;alit&amp;eacute; et de nous pr&amp;eacute;senter des pistes d'optimisation &amp;agrave; explorer quand toutes les &amp;eacute;vidences de haut niveau habituelles seront &amp;eacute;puis&amp;eacute;es. 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Au passage il nous fait profiter de son exp&amp;eacute;rience en production avec le G1GC qui ne semble pas aussi prometteur que nous pouvions l'escompter, le poussant &amp;agrave; revenir sur le CMS. On en apprend &amp;eacute;galement sur les effets de l'immutabilit&amp;eacute; de la programmation fonctionnelle sur le GC et il n'h&amp;eacute;site pas &amp;agrave; nous balancer quelques Scuds en demandant pourquoi des fonctionnalit&amp;eacute;s du langage telles que les lambdas repr&amp;eacute;sentent tant dans nos attentes quand il reste tellement &amp;agrave; optimiser dans l'existant… D&amp;egrave;s qu'elles seront disponibles dans Parleys, pr&amp;eacute;cipitez vous sur ses prestations. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;
  Je termine ce billet en remerciant l'&amp;eacute;quipe organisatrice de la manifestation: l'ambiance est au rendez-vous, y en a pour tous et la soir&amp;eacute;e &amp;quot;meet and greet&amp;quot; (en observant la t&amp;ecirc;te de quelques uns vendredi matin, &amp;ccedil;a aurait pu s'appeler &amp;quot;meet and drink&amp;quot; :o) ) est une super opportunit&amp;eacute; de rencontres et d'&amp;eacute;change en mangeant du fromage. Vivement DevoxxFr 2014! 
&lt;/div&gt;
</description>
                <link>http://username.github.io/2013/03/31/Retour%2Bsur%2BDevoxxFr%2B2013</link>
                <guid>http://username.github.io/2013/03/31/Retour+sur+DevoxxFr+2013</guid>
                <pubDate>2013-03-31T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Why Scala&#58; La stack (1/2)</title>
                <description>
&lt;br /&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Dans mon 
  &lt;a href=&quot;http://the-babel-tower.blogspot.fr/2013/02/why-scala.html&quot;&gt;billet pr&amp;eacute;c&amp;eacute;dent&lt;/a&gt;, j'expose mon retour d'exp&amp;eacute;rience concernant Scala. Maintenant que je poss&amp;egrave;de le langage (enfin quelques &amp;eacute;l&amp;eacute;ments), que me manque-t-il pour coder une application de la vraie vie? Un outil de build, une couche pour faciliter les acc&amp;egrave;s JDBC et un framework web me paraissent &amp;ecirc;tre le minimum. Je vais me pencher sur les cas de 
  &lt;a href=&quot;http://www.scala-sbt.org/&quot;&gt;SBT&lt;/a&gt;, 
  &lt;a href=&quot;http://slick.typesafe.com/&quot;&gt;Slick&lt;/a&gt; et 
  &lt;a href=&quot;http://www.playframework.com/&quot;&gt;Play Framework 2.1&lt;/a&gt; (what else?). 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;h1&gt;SBT&lt;/h1&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   C'est l'outil de build qui me semble le plus r&amp;eacute;pandu pour le d&amp;eacute;veloppement Scala. Il est incontournable pour Play Framework (la console se base dessus). Si on regarde un peu en arri&amp;egrave;re,&amp;nbsp; pour nous d&amp;eacute;livrer de javac, Apache &amp;agrave; cr&amp;eacute;&amp;eacute; Ant. C'&amp;eacute;tait bien mais trop freestyle et des configurations complexes ont &amp;eacute;t&amp;eacute; engendr&amp;eacute;es en masse. Qu'&amp;agrave; cela ne tienne, puisque la gestion technique du projet n&amp;eacute;cessite un outil plus coercitif, Apache nous apporte une fois de plus la lumi&amp;egrave;re avec Maven (on va dire que l'ampoule a &amp;eacute;t&amp;eacute; viss&amp;eacute;e &amp;agrave; partir de Maven 2). Aujourd'hui les critiques fusent autour du manque de flexibilit&amp;eacute;. Comme tous, j'ai du faire l'investissement autour de Maven il y a quelques ann&amp;eacute;es, il n'est pas parfait mais je le ma&amp;icirc;trise et il fait le taf, au prix de quelques acrobaties parfois.&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Je trouve que l'outil de build est un non sujet. Que l'application soit construite avec Ant, Maven, Graddle ou des scripts shell, quelle diff&amp;eacute;rence pour l'utilisateur? Pire: pour le code? Devoir encore passer du temps sur SBT me para&amp;icirc;t &amp;ecirc;tre une perte s&amp;egrave;che et m'irrite un peu je l'avoue. Je me limite donc &amp;agrave; des copier-coller de config et aux commandes compile, test et idea. Pas d'appr&amp;eacute;ciation. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;h1&gt;Slick&lt;/h1&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Anciennement ScalaQuery, Slick est un framework d'acc&amp;egrave;s aux donn&amp;eacute;es en Scala. Il propose trois voies d'acc&amp;egrave;s:&amp;nbsp; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;plain SQL queries: &amp;agrave; priori peu d'int&amp;eacute;r&amp;ecirc;t, je ne me suis peu attard&amp;eacute; dessus&lt;/li&gt; 
  &lt;li&gt;lifted embedding: j'ai pr&amp;eacute;sent&amp;eacute; les possibilit&amp;eacute;s de la boucle for en Scala dans mon pr&amp;eacute;c&amp;eacute;dent billet et notamment le sentiment que l'on peut interroger les collections comme des tables relationnelles. Et c'est ce que ce mode propose et c'est ce qui m'a d'ailleurs attir&amp;eacute; vers Slick:&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush:scala&quot;&gt;//Domain definition&lt;br /&gt;      case class Supplier(id:Int,name:String)&lt;br /&gt;&lt;br /&gt;//DAO&lt;br /&gt;      object Suppliers extends Table[Supplier](&amp;quot;SUPPLIER&amp;quot;){&lt;br /&gt; //Column definition&lt;br /&gt;        def id = column[Int](&amp;quot;id&amp;quot;, O.PrimaryKey)&lt;br /&gt;        def name = column[String](&amp;quot;name&amp;quot;)&lt;br /&gt;&lt;br /&gt; //Projection definition&lt;br /&gt;        def * = id ~ name &amp;lt;&amp;gt;(Supplier, Supplier.unapply _)&lt;br /&gt;      }&lt;br /&gt;&lt;br /&gt;//Interrogation&lt;br /&gt;      val q = for {&lt;br /&gt;        s &amp;lt; - Suppliers&lt;br /&gt;        if s.name === &amp;quot;my supp&amp;quot;&lt;br /&gt;      } yield s.id&lt;br /&gt;&lt;br /&gt;      q.list/* have fun here with Scala lists!*/.foreach(println)&lt;br /&gt;&lt;/pre&gt; 
&lt;div style=&quot;text-align: justify;&quot;&gt;
  Slick propose un troisi&amp;egrave;me mode, direct embedding, l'exemple va vous rappeler quelqu'un: 
&lt;/div&gt; 
&lt;pre class=&quot;brush:scala&quot;&gt;@table(name=&amp;quot;COFFEES&amp;quot;)&lt;br /&gt;case class Coffee(&lt;br /&gt; @column(name=&amp;quot;NAME&amp;quot;)&lt;br /&gt; name : String,&lt;br /&gt; @column(name=&amp;quot;PRICE&amp;quot;)&lt;br /&gt; price : Double&lt;br /&gt;)&lt;br /&gt;&lt;/pre&gt; 
&lt;div style=&quot;text-align: justify;&quot;&gt;
  Et l&amp;agrave; comme j'ai pu le faire, vous &amp;ecirc;tes en train de vous dire que c'est du JPA! Enfin &amp;ccedil;a le sera peut &amp;ecirc;tre un jour car la doc stipule deux bloqueurs: 
&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt;
  The direct embedding currently only supports database columns, which can be mapped to either 
 &lt;span class=&quot;s8&quot;&gt;String, Int, Double&lt;/span&gt;. 
 &lt;i&gt;Ouch m&amp;ecirc;me pas les dates!&lt;/i&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   The direct embedding currently does not feature insertion of data. WTF? On peut interroger des donn&amp;eacute;es qu'on a pas pu ins&amp;eacute;rer? Pas exactement, il faut utiliser un des deux autres modes pour persister. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Mes attentes principales autour d'un outil d'acc&amp;egrave;s aux donn&amp;eacute;es sont de g&amp;eacute;n&amp;eacute;rer le SQL pour me faire r&amp;ecirc;ver que le changement de SGBD sera sans impact sur le code et des fonctions de mapping relationnel-objet pour limiter le code boilerplate. Du coup des trois modes il n'en reste qu'un: lifted embedding. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt;
  Le langage de requ&amp;ecirc;tage bas&amp;eacute; sur la boucle for est fort s&amp;eacute;duisant: 
&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;&lt;/div&gt; 
 &lt;ul&gt; 
  &lt;li&gt;il est tr&amp;egrave;s concis et s'int&amp;egrave;gre agr&amp;eacute;ablement dans le code, apr&amp;egrave;s je ne l'ai pas challeng&amp;eacute; avec un sch&amp;eacute;ma de 200 tables non plus...&lt;/li&gt; 
  &lt;li&gt;il est statiquement typ&amp;eacute;: pour avoir la m&amp;ecirc;me chose avec JPA 2.0, il faut g&amp;eacute;n&amp;eacute;rer un m&amp;eacute;ta mod&amp;egrave;le et utiliser l'API criteria (mon royaume pour une corde et un arbre que j'aille me pendre…)&lt;/li&gt; 
 &lt;/ul&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Je m&amp;egrave;ne ces explorations par pure convenance personnelle et ce sont les technologies traditionnelles qui me permettent de ramener le pain quotidien, il est donc facile de deviner que ma r&amp;eacute;f&amp;eacute;rence en la mati&amp;egrave;re est JPA. D'ailleurs dans les diff&amp;eacute;rences fondamentales, on notera deux points marquants: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Les entit&amp;eacute;s mapp&amp;eacute;es ne sont pas manag&amp;eacute;es: le framework n'a aucune id&amp;eacute;e de la situation d'un objet du domaine au regard de son &amp;eacute;tat en base; de plus il n'est m&amp;ecirc;me pas obligatoire d'associer un DAO avec une classe, il peut tout aussi bien exploiter des tuples. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Les relations ne sont donc pas port&amp;eacute;es par le mod&amp;egrave;le m&amp;eacute;tier mais par les DAO, ce qui implique que la navigation dans le graphe passe n&amp;eacute;cessairement par une interrogation explicite. Imaginons l'extension de l'exemple pr&amp;eacute;c&amp;eacute;dent: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;pre class=&quot;brush:scala&quot;&gt;      object Coffees extends Table[Coffee](&amp;quot;COFFEE&amp;quot;){&lt;br /&gt;        def id = column[Int](&amp;quot;id&amp;quot;, O.PrimaryKey)&lt;br /&gt;        def name = column[String](&amp;quot;name&amp;quot;)&lt;br /&gt;        def supplierId = column[Int](&amp;quot;sup_id&amp;quot;, O.NotNull)&lt;br /&gt;&lt;br /&gt;        def * = id ~supplierId~name &amp;lt;&amp;gt;(Coffee,Coffee.unapply _)&lt;br /&gt;        def supplier = foreignKey(&amp;quot;fk_supId&amp;quot;, supplierId,Suppliers)(_.id)&lt;br /&gt;&lt;br /&gt;      }&lt;br /&gt;&lt;br /&gt;      (Suppliers.ddl ++ Coffees.ddl).create&lt;br /&gt;&lt;br /&gt;      Suppliers.insert(Supplier(1, &amp;quot;my supp&amp;quot;))&lt;br /&gt;&lt;br /&gt;      Coffees.insert(Coffee(1,1,&amp;quot;Ristretto&amp;quot;))&lt;br /&gt;&lt;br /&gt;      val q = for {&lt;br /&gt;        c &amp;lt; - Coffees&lt;br /&gt;        s &amp;lt; - c.supplier&lt;br /&gt;      } yield (s.name, c.name)&lt;br /&gt;      q.list.foreach(println)&lt;br /&gt;    }&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   De prime abord, ces points semblent &amp;ecirc;tre des lacunes compar&amp;eacute;s &amp;agrave; JPA. Mais en prenant un peu de recul, lors de la plupart (hmm… peut &amp;ecirc;tre m&amp;ecirc;me la totalit&amp;eacute;?) de mes interventions sur les projets, j'ai pu observer que l'ORM &amp;eacute;tait souvent hors de contr&amp;ocirc;le. Oui, &amp;quot;sans ma&amp;icirc;trise la puissance n'est rien&amp;quot; (j'adore), et toute la magie apport&amp;eacute;e par l'instrumentation des classes, les invocations d'assesseurs interrogeant automatiquement la BDD, la fusion d'entit&amp;eacute;s et j'en passe, &amp;eacute;clipsent totalement la m&amp;eacute;canique sous-jacente. Le r&amp;eacute;sultat: des torrents de SQL noient litt&amp;eacute;ralement nos bases, devant &amp;eacute;galement faire face &amp;agrave; des requ&amp;ecirc;tes monstrueuses aux jointures improbables, impliquant des plans d'ex&amp;eacute;cution moins accessibles que le Saint Graal lui m&amp;ecirc;me, et souvent pour afficher moins de colonnes que les doigts d'une main. Ne nous trompons pas, je ne dresse pas le proc&amp;egrave;s de JPA, une tr&amp;egrave;s belle technologie, mais celui de ses utilisateurs. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Alors finalement, moins de fonctionnalit&amp;eacute;s r&amp;eacute;duit la fracture entre les d&amp;eacute;veloppeurs et la mod&amp;eacute;lisation relationnelle. Slick semble parvenir &amp;agrave; ce compromis: il concilie un niveau d'abstraction acceptable en gardant &amp;agrave; sa charge les basses besognes, telles que la g&amp;eacute;n&amp;eacute;ration du SQL, avec un code qui laisse l'informaticien conscient des concepts mis en oeuvre. A m&amp;eacute;diter. 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Chers internautes, je me dois maintenant d'interrompre ce s&amp;eacute;jour sur l'&amp;icirc;le aux enfants pour nous ramener dans la vraie vie, alors dites au revoir &amp;agrave; Casimir et pr&amp;eacute;parez vous &amp;agrave; la descente. 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   D'abord les snippets pr&amp;eacute;sent&amp;eacute;s sont &amp;eacute;videmment r&amp;eacute;sum&amp;eacute;s dans un souci de lisibilit&amp;eacute;. Slick exploite le c&amp;ocirc;t&amp;eacute; obscur de Scala (selon moi &amp;eacute;videmment), les wrappers implicites. Pour que notre boucle for appliqu&amp;eacute;es aux tables compile il faut importer un driver permettant d'int&amp;eacute;grer le langage de Slick avec la source de donn&amp;eacute;es JDBC (&amp;agrave; l'image du dialecte Hibernate). Ensuite, il faut ouvrir ou r&amp;eacute;cup&amp;eacute;rer la session courante: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;pre class=&quot;brush:scala&quot;&gt;import Database.threadLocalSession&lt;br /&gt;import scala.slick.driver.H2Driver.simple._&lt;br /&gt;&lt;br /&gt;Database.forURL(&amp;quot;jdbc:h2:mem:test1&amp;quot;, driver = &amp;quot;org.h2.Driver&amp;quot;) withSession {&lt;br /&gt; val q = for(....&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p13&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Admettons devoir int&amp;eacute;grer ce code dans une application, l'URL et le driver JDBC, on peut les caser dans un fichier de conf, mais pour le driver Slick on fait quoi? On ne va pas laisser des H2Driver tra&amp;icirc;ner dans toutes les classes, et puis c'est bon pour les tests ou les POC mais quand le temps viendra d'utiliser une vraie base on fera quoi? La solution se base sur le cake pattern qui mod&amp;eacute;lise l'injection de d&amp;eacute;pendance statiquement typ&amp;eacute;e en Scala (plus de d&amp;eacute;tails sur 
  &lt;a href=&quot;http://jonasboner.com/2008/10/06/real-world-scala-dependency-injection-di/&quot;&gt;http://jonasboner.com/2008/10/06/real-world-scala-dependency-injection-di/&lt;/a&gt;). Je vous laisse consulter l'exemple fourni sur 
  &lt;a href=&quot;https://github.com/slick/slick-examples/blob/master/src/main/scala/com/typesafe/slick/examples/lifted/MultiDBCakeExample.scala#L61&quot;&gt;https://github.com/slick/slick-examples/blob/master/src/main/scala/com/typesafe/slick/examples/lifted/MultiDBCakeExample.scala#L61&lt;/a&gt;. Il pr&amp;eacute;sente un g&amp;acirc;teau avec trois ingr&amp;eacute;dients: l'encapsulation du driver Slick, le compsant d'acc&amp;egrave;s aux donn&amp;eacute;es et les DAO. Je le trouve nettement plus indigeste que: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush:scala&quot;&gt;@PersistenceContext&lt;br /&gt;private EntityManager em;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p13&quot;&gt;
  Affaire de go&amp;ucirc;t?&amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Les exemples fournis se basent uniquement sur la session, quid de la gestion transactionnelle? En parcourant la documentation de r&amp;eacute;f&amp;eacute;rence, je n'ai rien trouv&amp;eacute;. Cependant j'ai r&amp;eacute;ussi &amp;agrave; d&amp;eacute;nicher qu'il fallait d'abord ouvrir une session puis regrouper toutes les commandes dans un bloc transactionnel: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;pre class=&quot;brush:scala&quot;&gt;Database.forURL(&amp;quot;jdbc:h2:mem:test1&amp;quot;, driver = &amp;quot;org.h2.Driver&amp;quot;) withSession {&lt;br /&gt; threadLocalSession.withTransaction{&lt;br /&gt;  [...]&lt;br /&gt; }&lt;br /&gt;} &lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
  &lt;div class=&quot;p1&quot;&gt;
    Personne ne leur &amp;agrave; montr&amp;eacute; @Transactionnal? Nous voil&amp;agrave; quelques ann&amp;eacute;es en arri&amp;egrave;re… 
  &lt;/div&gt; 
  &lt;div class=&quot;p1&quot;&gt; 
   &lt;br /&gt; 
  &lt;/div&gt; 
  &lt;br /&gt;Slick propose les query templates qui permettent d'ex&amp;eacute;cuter une requ&amp;ecirc;te plusieurs fois avec des param&amp;egrave;tres diff&amp;eacute;rents. Nous savons tous combien les optimiseurs SQL appr&amp;eacute;cient cette attention et nous la rendent avec des temps d'ex&amp;eacute;cution diminu&amp;eacute;s. Seulement les query templates ne couvrent que l'interrogation (select), ce qui implique que les manipulations (update/delete) param&amp;eacute;tr&amp;eacute;es ne sont disponibles qu'au travers du mode plain SQL queries. Une lacune difficilement excusable, gageons qu'il s'agit d'un probl&amp;egrave;me de jeunesse. 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   La documentation d'API n'a que le m&amp;eacute;rite d'exister, les d&amp;eacute;veloppeurs doivent respecter une des lois XP qui pr&amp;eacute;cise que si des commentaires sont n&amp;eacute;cessaires c'est que le code n'est pas clair… Bref, une Scala Doc qui est tout bonnement an&amp;eacute;mique et qui daigne nous l&amp;acirc;cher royalement une phrase de description dans quelques une des classes. 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Je trouve Slick prometteur, car une fois que tous les petits d&amp;eacute;fauts de jeunesse seront combl&amp;eacute;s, Scala b&amp;eacute;n&amp;eacute;ficiera d'une technologie d'acc&amp;egrave;s aux donn&amp;eacute;es qui sera parfaitement int&amp;eacute;gr&amp;eacute;e au langage. En revanche passer de la version 0.11 &amp;agrave; la version 1.0 (releas&amp;eacute;e il y a peu) est un peu rapide. 1.0 me para&amp;icirc;t &amp;ecirc;tre un jalon dans lequel les fonctionnalit&amp;eacute;s de base sont combl&amp;eacute;es, avec &amp;eacute;ventuellement quelques bogues ou une int&amp;eacute;grabilit&amp;eacute; balbutiante apr&amp;egrave;s tout 1.0 est un gage de jeunesse. Seulement voil&amp;agrave;, l'embedded mode est tout simplement inexploitable et le lifted mode incomplet. N'aurait-il pas &amp;eacute;t&amp;eacute; plus utile au projet de finaliser le deuxi&amp;egrave;me avant de s'aventurer sur le premier? Mais ne jetons pas le b&amp;eacute;b&amp;eacute; avec l'eau du bain, l'&amp;eacute;volution de ce framework reste d&amp;eacute;finitivement &amp;agrave; surveiller, m&amp;ecirc;me si son num&amp;eacute;ro de version actuel devrait &amp;ecirc;tre 0.8 au lieu de 1.0.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p8&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p7&quot;&gt;
  M'&amp;eacute;pancher sur le cas de Play ferait un billet assez long, donc je m'arr&amp;ecirc;te l&amp;agrave; et vous proposerais la suite rapidement c'est promis! 
&lt;/div&gt;
</description>
                <link>http://username.github.io/2013/02/22/Why%2BScala%253A%2BLa%2Bstack%2B%25281%252F2%2529</link>
                <guid>http://username.github.io/2013/02/22/Why+Scala%3A+La+stack+%281%2F2%29</guid>
                <pubDate>2013-02-22T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Why Scala?</title>
                <description>
Le geek est une esp&amp;egrave;ce qui pr&amp;eacute;sente un comportement addictif au renouveau perp&amp;eacute;tuel. 
&lt;br /&gt; 
&lt;div class=&quot;p2&quot;&gt;
  Les geeks se d&amp;eacute;coupent en plusieurs castes dont une d'entre elles regroupe ceux qui codent en Java. Depuis quelques temps les membres de celle-ci souffrent car ce langage ne bouge gu&amp;egrave;re. Pour r&amp;eacute;pondre &amp;agrave; ce mal, fleurissent des langages alternatifs qui s'ex&amp;eacute;cutent tout de m&amp;ecirc;me sur la JVM, dont un en particulier: Scala. Il entra&amp;icirc;ne d'ailleurs la naissance de guerres de clocher au sein m&amp;ecirc;me de la caste.&amp;nbsp; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt;
  Tiraill&amp;eacute; par le manque d'&amp;eacute;volution (quoi je suis le seul qui n'a m&amp;ecirc;me pas eu une demi molle en d&amp;eacute;couvrant le diamond operator de Java7??) et curieux de comprendre ce qui d&amp;eacute;fraie autant de passion, j'ai d&amp;eacute;cid&amp;eacute; de monter en comp&amp;eacute;tence sur cette technologie (pas si nouvelle que &amp;ccedil;a d'ailleurs - 2003). J'ai mang&amp;eacute; le pav&amp;eacute; de Martin Odersky 'Programming in Scala', transpir&amp;eacute; sur les katas S-99, suivi la session propos&amp;eacute; par Coursera et quelques mois plus tard, j'aimerais dresser mon bilan de l'exp&amp;eacute;rience. 
 &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;h3&gt;Ce qui m'a plu&lt;/h3&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt;Scala est un langage permettant de r&amp;eacute;soudre les probl&amp;egrave;mes par l'approche fonctionnelle (mais pas exclusivement car il reste compatible avec l'orient&amp;eacute; objet) et il m'a donc &amp;eacute;t&amp;eacute; n&amp;eacute;cessaire d'appr&amp;eacute;hender les concepts li&amp;eacute;s &amp;agrave; ce style de programmation. Voici un floril&amp;egrave;ge de ce que j'en ai appr&amp;eacute;ci&amp;eacute;: 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt;
  Evidemment les lambdas. Un buzzword qui fait beaucoup couler d'octets sur la toile, un des fondements de la programmation fonctionnelle, le saint graal qui doit permettre de tirer ais&amp;eacute;ment parti des architectures multicores. J'avoue &amp;ecirc;tre un poil perdu: les lambdas sont-elles un concept fondamental ou simplement du sucre syntaxique. Une chose est claire: le code en est plus concis et je kiffe. 
 &lt;br /&gt;&amp;nbsp;Un des principaux int&amp;eacute;r&amp;ecirc;ts des lambdas est sont int&amp;eacute;gration dans le SDK, donc ce n'est pas un scoop, les listes en Scala, &amp;ccedil;a poutre. 
 &lt;br /&gt; 
 &lt;br /&gt;La boucle for est sacr&amp;eacute;ment revisit&amp;eacute;e: fini les boucles imbriqu&amp;eacute;es gr&amp;acirc;ce &amp;agrave; cette nouvelle syntaxe qui permet d'int&amp;eacute;grer des produits cart&amp;eacute;siens ainsi que filtres de fa&amp;ccedil;on &amp;eacute;l&amp;eacute;gante… on a l'impression de requ&amp;ecirc;ter les collections comme on le ferait avec des tables relationnelles. Quelques exemples sympas: 
 &lt;br /&gt;Produit cart&amp;eacute;sien: 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; for ( i &amp;lt;- 1 to 2; j &amp;lt;- List(&amp;quot;un&amp;quot;,&amp;quot;deux&amp;quot;)) yield(i,j)&lt;br /&gt;res4: scala.collection.immutable.IndexedSeq[(Int, java.lang.String)] = Vector((1,un), (1,deux), (2,un), (2,deux))&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt;
  Jointure 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; for ( i &amp;lt;- 1 to 2; j &amp;lt;- List((1,&amp;quot;un&amp;quot;),(2,&amp;quot;deux&amp;quot;)) ; if i==j._1) yield(i,j)&lt;br /&gt;res5: scala.collection.immutable.IndexedSeq[(Int, (Int, java.lang.String))] = Vector((1,(1,un)), (2,(2,deux)))&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;br /&gt;L'inf&amp;eacute;rence de type. Il trouve tout seul: 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; val i=0&lt;br /&gt;i: Int = 0&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt;
  Le compilateur n'est plus malentendant et il n'est plus n&amp;eacute;cessaire de lui r&amp;eacute;p&amp;eacute;ter plusieurs fois le type. Scala mise d&amp;eacute;finitivement sur la concision du langage. 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Les fonctions partielles ou Currying. Imaginez une fonction pour laquelle seule une partie des param&amp;egrave;tres est d&amp;eacute;finie, mais &amp;ccedil;a donne quoi? Une fonction qui attends le reste de param&amp;egrave;tres. Cool non? Exemple: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; def stupidAdditionExample(i:Int)(j:Int)=i+j&lt;br /&gt;stupidAdditionExample: (i: Int)(j: Int)Int&lt;br /&gt;&lt;br /&gt;scala&amp;gt; val partial = stupidAdditionExample(2)_&lt;br /&gt;partial: Int =&amp;gt; Int = 
   
 &lt;function1&gt;
    
  &lt;br /&gt;
    
  &lt;br /&gt;scala&amp;gt; partial(3)
    
  &lt;br /&gt;res0: Int = 5
    
  &lt;br /&gt;
    
  &lt;br /&gt;
   
 &lt;/function1&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt;L'immutabilit&amp;eacute;. Bloch en vante largement les vertus pour &amp;eacute;viter d'avoir &amp;agrave; poser des verrous pour synchroniser les acc&amp;egrave;s concurrents dans Effective Java , mais franchement dans un quotidien de d&amp;eacute;veloppement d'application web de gestion reposant sur des conteneurs et JPA, on est content de le savoir mais on a l'impression de n'&amp;ecirc;tre que partiellement concern&amp;eacute;. Dans Scala on ne peut pas passer &amp;agrave; c&amp;ocirc;t&amp;eacute; et les variables ne deviennent qu'une possibilit&amp;eacute; optionnelle. En plus des consid&amp;eacute;rations techniques avanc&amp;eacute;es par Bloch, la programmation fonctionnelle ajoute le fait que la mutabilit&amp;eacute; des variables n'est issu d'aucun concept math&amp;eacute;matique ou algorithmique mais est simplement le reflet de la possibilit&amp;eacute; de modifier le contenu des registres du socle mat&amp;eacute;riel. La mutabilit&amp;eacute; n'est pas la r&amp;eacute;alit&amp;eacute; et c'est mal pour la concurrence. J'ai cru au d&amp;eacute;but que &amp;ccedil;a allait piquer car il faut lutter contre de vieilles habitudes et en fait non… je me suis vu contraint de faire appel &amp;agrave; une variable une seule fois (une sale histoire d'InputStream, je ne peux rien dire de plus la cicatrice est encore fra&amp;icirc;che). &amp;nbsp; 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   &amp;quot;Je te donne peut-&amp;ecirc;tre une valeur… et peut-&amp;ecirc;tre pas&amp;quot;, &amp;ccedil;a ce sont les options. L'int&amp;eacute;r&amp;ecirc;t n'est pas flagrant de prime abord mais du coup tous les &amp;quot;if null else&amp;quot; disparaissent (et les NPE de surcro&amp;icirc;t) . De plus l'API offre la possibilit&amp;eacute; de modifier le contenu et de d&amp;eacute;finir des valeurs par d&amp;eacute;faut contextuelles: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; val peutetre=Some(1)&lt;br /&gt;peutetre: Some[Int] = Some(1)&lt;br /&gt;&lt;br /&gt;scala&amp;gt; peutetre.get&lt;br /&gt;res1: Int = 1&lt;br /&gt;&lt;br /&gt;scala&amp;gt; val rien=None&lt;br /&gt;rien: None.type = None&lt;br /&gt;&lt;br /&gt;scala&amp;gt; rien.get&lt;br /&gt;java.util.NoSuchElementException: None.get&lt;br /&gt;&lt;br /&gt;scala&amp;gt; rien.getOrElse(1)&lt;br /&gt;res3: Int = 1&lt;br /&gt;&lt;br /&gt;scala&amp;gt; peutetre.map(i=&amp;gt; &amp;quot;valeur = &amp;quot; + i).getOrElse(&amp;quot;Rien&amp;quot;)&lt;br /&gt;res6: java.lang.String = valeur = 1&lt;br /&gt;&lt;br /&gt;scala&amp;gt; rien.map(i=&amp;gt; &amp;quot;valeur = &amp;quot; + i).getOrElse(&amp;quot;Rien&amp;quot;)&lt;br /&gt;res7: java.lang.String = Rien&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt;Les applications n&amp;eacute;cessitent souvent un singleton et les patterns compliqu&amp;eacute;s et souvent bugg&amp;eacute;s ont longtemps fleuri, la r&amp;eacute;ponse de Spring a &amp;eacute;t&amp;eacute; de fournir des singletons de fait et enfin Java 5 a permis de mettre tout le monde d'accord gr&amp;acirc;ce &amp;agrave; une utilisation d&amp;eacute;riv&amp;eacute;e des Enum. Mais voil&amp;agrave; si cette derni&amp;egrave;re option est techniquement justifi&amp;eacute;e, elle reste s&amp;eacute;mantiquement tr&amp;egrave;s discutable. Qu'&amp;agrave; cela ne tienne, puisqu'il s'agit d'un besoin r&amp;eacute;current Scala l'int&amp;egrave;gre dans le langage avec l'object. Efficace et pertinent. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   L'un des leitmotiv de Scala est que la r&amp;eacute;duction du nombre de lignes de code d'une application &amp;agrave; p&amp;eacute;rim&amp;egrave;tre fonctionnel constant r&amp;eacute;duit les probabilit&amp;eacute;s de bugs. Donc pour permettre la diminution du code &amp;quot;boilerplate&amp;quot;, le langage apporte une quantit&amp;eacute; importante de sucre syntaxique. Le geek est friand par nature du sucre syntaxique. J'ai kiff&amp;eacute;. Quelques exemples: 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Qui n'a jamais r&amp;ecirc;v&amp;eacute; de la possibilit&amp;eacute; de d&amp;eacute;finir la structure d'un bean an&amp;eacute;mique avec un oneliner? Les case class le permettent car seuls les membres sont d&amp;eacute;finis, le compilateur s'occupe des assesseurs, du constructeur et des m&amp;eacute;thodes equals/hashcode (et plus encore). 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; MyBean(2).equals(3)&lt;br /&gt;res8: Boolean = false&lt;br /&gt;&lt;br /&gt;scala&amp;gt; MyBean(2).equals(MyBean(2))&lt;br /&gt;res9: Boolean = true&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt;Les placeholders paraissent de prime abord un peu rugueux mais ils deviennent vite habituels. En gros, ils permettent de ne pas d&amp;eacute;clarer ni nommer les param&amp;egrave;tres qu'une closure utilise en fonction de leur position. Ainsi la r&amp;eacute;duction suivante 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; List(1,2,3).foldLeft(0)((acc,elem)=&amp;gt;acc+elem)&lt;br /&gt;res19: Int = 6&lt;br /&gt;&lt;/pre&gt;Peut s'&amp;eacute;crire &amp;eacute;galement: 
&lt;br /&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; List(1,2,3).foldLeft(0)(_+_)&lt;br /&gt;res18: Int = 6&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Il y a plein d'autres utilisations possibles des placholder (ils ont &amp;eacute;t&amp;eacute; utilis&amp;eacute;s pour pr&amp;eacute;senter les fonctions partielles notamment). 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Un des atouts des case class est leur utilisation avec le pattern matching. Il s'agit d'une autre forme d'instanceOf bas&amp;eacute; &amp;nbsp;sur les extracteurs (tiens encore une fonctionnalit&amp;eacute; int&amp;eacute;gr&amp;eacute;e aux case classes). Je vous livre en l'&amp;eacute;tat un exemple tr&amp;egrave;s incorrect mais qui permet une illustration succincte du concept: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; MyBean(3) match { case MyBean(i) =&amp;gt; i+2 }&lt;br /&gt;res20: Int = 5&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Cela fonctionne que parce que la d&amp;eacute;finition d'une case class implique la cr&amp;eacute;ation d'un objet compagnon qui fourni un extracteur: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; MyBean.unapply(MyBean(3))&lt;br /&gt;res4: Option[Int] = Some(3)&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt;La liste pourrait s'allonger de fa&amp;ccedil;on assez ennuyeuse: pas besoin de ';', pas besoin de parenth&amp;egrave;ses pour les fonctions sans param&amp;egrave;tres, contr&amp;ocirc;le sur l'&amp;eacute;valuation des param&amp;egrave;tres (by name / by value), etc. Mais je vais m'en tenir l&amp;agrave; et passer aux notes un peu plus douloureuses. 
  &lt;br /&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;h3&gt;Ce qui m'a d&amp;eacute;plu&lt;/h3&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt;La conversion implicite, au moyen de wrappers, est une fonctionnalit&amp;eacute; qui permet de d&amp;eacute;corer automatiquement les objets et par ce biais de leur ajouter des m&amp;eacute;thodes. Cela apporte la libert&amp;eacute; syntaxique d'un langage dynamique dans un langage bas&amp;eacute; sur le typage. S&amp;eacute;duisant non? Exemple: 
 &lt;/div&gt; 
 &lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; class StringWrapper(s:String){&lt;br /&gt;     | def taille=s.length&lt;br /&gt;     | }&lt;br /&gt;defined class StringWrapper&lt;br /&gt;&lt;br /&gt;scala&amp;gt; implicit def toWrapString(s:String)=new StringWrapper(s)&lt;br /&gt;toWrapString: (s: String)StringWrapper&lt;br /&gt;&lt;br /&gt;scala&amp;gt; &amp;quot;yes&amp;quot;.taille&lt;br /&gt;res0: Int = 3&lt;br /&gt;&lt;/pre&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Mais pour les activer il faut souvent les importer, de plus naviguer dans les API d'une biblioth&amp;egrave;que tierce devient un enfer. J'aime pas. 
  &lt;br /&gt; 
  &lt;br /&gt;La programmation fonctionnelle mise sur des conceptions bas&amp;eacute;es sur des appels r&amp;eacute;cursifs. Seulement voil&amp;agrave;, la JVM est la plateforme d'ex&amp;eacute;cution et elle n'appr&amp;eacute;cie qu'avec mod&amp;eacute;ration cette pratique (gare &amp;agrave; la&amp;nbsp;StackOverflowError). Pour contourner cette limitation, Scala sugg&amp;egrave;re d'utiliser la 'tail recursion' qui se caract&amp;eacute;rise par un appel r&amp;eacute;cursif en derni&amp;egrave;re instruction de la fonction. Cette pratique lui permet de modifier le code &amp;agrave; la compilation en boucle for. Le b&amp;eacute;mol est que l'abstraction du language vis &amp;agrave; vis des consid&amp;eacute;rations techniques est bris&amp;eacute;e car la conception est stigmatis&amp;eacute;e par les limites de la JVM. C'est pas sa faute mais j'aime pas. 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt;&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Variance, covariance, contravariance, nonvariance… les possibilit&amp;eacute;s de contr&amp;ocirc;le des param&amp;egrave;tres de type sont compl&amp;egrave;tes… et donc &amp;eacute;galement complexes… Difficile de s'y retrouver sans avoir la doc ouverte au bon chapitre. Un exemple: 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;trait MapLike[A, +B, +This &amp;lt;: MapLike[A, B, This] with Map[A, B]] extends collection.MapLike[A, B, This] withParallelizable[(A, B), ParMap[A, B]]&lt;br /&gt;&lt;/pre&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Le code est issu du SDK ( 
  &lt;a href=&quot;http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.MapLike&quot;&gt;ici&lt;/a&gt;) Je me m'aventurerais pas &amp;agrave; en nier la pertinence, en revanche je suppute que l'&amp;ecirc;tre vivant qui d&amp;eacute;chiffre ces param&amp;egrave;tres d'une traite est s&amp;ucirc;rement capable de donner le nombre exact d'allumettes qui viennent de tomber par terre... 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Lorsque l'on tente de d&amp;eacute;river une case class dans une autre case class, voici le message produit par le compilateur (avec l'option deprecation): 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; case class MyBean(id:Int)&lt;br /&gt;defined class MyBean&lt;br /&gt;&lt;br /&gt;scala&amp;gt; case class MySubBean(name:String) extends MyBean(2)&lt;br /&gt;
   
 &lt;console&gt;
  
    :9: warning: case class `class MySubBean' has case ancestor `class MyBean'.  
    
  &lt;br /&gt;Case-to-case inheritance has potentially dangerous bugs which are unlikely to be fixed.  
    
  &lt;br /&gt;You are strongly encouraged to instead use extractors to pattern match on non-leaf nodes.
    
  &lt;br /&gt;
    
  &lt;br /&gt;
   
 &lt;/console&gt;&lt;/pre&gt; 
&lt;div class=&quot;p2&quot;&gt;
  Y a s&amp;ucirc;rement une excellente raison, mais le message est d&amp;eacute;routant. 
&lt;/div&gt; 
&lt;div class=&quot;p1&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   Les param&amp;egrave;tres implicites font &amp;agrave; mes yeux partie de ces concepts qui apportent de la magie &amp;agrave; un langage... enfin je dirais plut&amp;ocirc;t de la sorcellerie: 
 &lt;/div&gt; 
 &lt;pre class=&quot;brush: scala&quot;&gt;scala&amp;gt; def imprime(implicit x:Int)=println(x)&lt;br /&gt;imprime: (implicit x: Int)Unit&lt;br /&gt;&lt;br /&gt;scala&amp;gt; implicit val test=3&lt;br /&gt;test: Int = 3&lt;br /&gt;&lt;br /&gt;scala&amp;gt; imprime&lt;br /&gt;3&lt;br /&gt;&lt;/pre&gt; 
 &lt;div&gt; 
  &lt;div style=&quot;text-align: justify;&quot;&gt;
    Simple dans cet exemple, mais vous vous doutez bien que les r&amp;egrave;gles li&amp;eacute;es ne le sont pas autant et si une autre valeur implicite tra&amp;icirc;ne dans les parages, les choses se corsent. Bref je trouve cette fonctionnalit&amp;eacute; dangereuse. 
  &lt;/div&gt; 
 &lt;/div&gt; 
 &lt;div&gt;&lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
  &lt;div style=&quot;text-align: justify;&quot;&gt;
    Un d&amp;eacute;tail ennuyeux: le code Scala compil&amp;eacute; l'est pour une version pr&amp;eacute;cise de scala ce qui a notamment entra&amp;icirc;n&amp;eacute; l'apparition d'une nouvelle dimension dans les coordonn&amp;eacute;es des d&amp;eacute;pendances... 
  &lt;/div&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;p2&quot;&gt; 
 &lt;br /&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   &amp;quot;With great power comes great responsibility...&amp;quot; Scala m'appara&amp;icirc;t con&amp;ccedil;u pour apporter une solution &amp;agrave; tous les probl&amp;egrave;mes qui ont pu &amp;ecirc;tre lev&amp;eacute;s dans &amp;nbsp;les langages auparavant et tente d'int&amp;eacute;grer toute fonctionnalit&amp;eacute; s&amp;eacute;duisante. Cela le rend il universel? S'il l'est, il l'est pour des d&amp;eacute;veloppeurs universels! Je le trouve assez &amp;eacute;litiste, ce qui me semble &amp;ecirc;tre son principal d&amp;eacute;faut et un frein &amp;agrave; son adoption.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;h3&gt;Ma conclusion&lt;/h3&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   S'il est difficile d'attendre d'un langage d'&amp;ecirc;tre l'&amp;eacute;l&amp;eacute;ment qui garanti la r&amp;eacute;ussite d'un projet, Scala prend &amp;agrave; sa charge des sujets sensibles tels que la concurrence, les threads et j'en passe. C'est un plus car le d&amp;eacute;veloppeur peut augmenter son attention sur le code m&amp;eacute;tier.&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div style=&quot;text-align: justify;&quot;&gt;
   C'est un langage qui m&amp;eacute;rite sa place dans l'ecosyst&amp;egrave;me, pas comme un leader du secteur, mais peut-&amp;ecirc;tre comme un Concept Car ou une Formule 1, la plebe dont nous faisons partie esp&amp;eacute;rant voir quelques unes de ses avanc&amp;eacute;es all&amp;eacute;chantes d&amp;eacute;clin&amp;eacute;es dans &amp;nbsp;nos outils quotidiens... Et puis le langage est une chose mais qu'est il sans une stack de d&amp;eacute;veloppement? C'est un autre sujet (to be continued)... 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;!--:--&gt; 
&lt;!----&gt; 
&lt;!----&gt; 
&lt;!----&gt; 
&lt;!----&gt;
</description>
                <link>http://username.github.io/2013/02/02/Why%2BScala%253F</link>
                <guid>http://username.github.io/2013/02/02/Why+Scala%3F</guid>
                <pubDate>2013-02-02T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>AngularJS + Play! Framework&#58; Authentification</title>
                <description>
&lt;br /&gt;En tant que newbie sur Angular, je me suis pos&amp;eacute; la question de l'authentification dans ce type d'applications. 
&lt;br /&gt;Pour ceux qui veulent aller directement &amp;agrave; la pr&amp;eacute;sentation du code, c'est 
&lt;a href=&quot;http://www.blogger.com/blogger.g?blogID=4336356511014175329#showMeCode&quot;&gt;l&amp;agrave;&lt;/a&gt;. 
&lt;br /&gt; 
&lt;div style=&quot;color: grey; font-style: italic;&quot;&gt;
  Depuis longtemps je suis habitu&amp;eacute; au d&amp;eacute;veloppement de web apps dont les pages sont g&amp;eacute;n&amp;eacute;r&amp;eacute;es dynamiquement sur le serveur (JSP, JSF, PHP, etc.): cette probl&amp;eacute;matique est donc combl&amp;eacute;e dans la plupart des cas par une redirection vers un formulaire d'authentification. Or avec un framework du type AngularJS, les pages sont g&amp;eacute;n&amp;eacute;r&amp;eacute;es dynamiquement sur le client &amp;agrave; partir de templates nourries de donn&amp;eacute;es obtenues du serveur collect&amp;eacute;es gr&amp;acirc;ce &amp;agrave; du code client (Javasript). 
 &lt;br /&gt;D'un point de vue technique cette approche a &amp;eacute;videmment &amp;eacute;norm&amp;eacute;ment de sens, car: 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;ul&gt; 
  &lt;li&gt;Toutes les ressources clientes sont donc &amp;quot;cachables&amp;quot;: templates, Javascript&lt;/li&gt; 
  &lt;li&gt;A l'heure du Cloud (un buzzword, un), le co&amp;ucirc;t d'h&amp;eacute;bergement est proportionnel &amp;agrave; la sollicitation, il est tout naturel de transf&amp;eacute;rer sur la machine du client (gratuite) toute charge &amp;eacute;ligilble&lt;/li&gt; 
  &lt;li&gt;L'&amp;eacute;tat du client est g&amp;eacute;r&amp;eacute;... sur le client (un truc de malade), permettant de r&amp;eacute;duire la pression sur la m&amp;eacute;moire de la partie serveur (au point pr&amp;eacute;c&amp;eacute;dent on a &amp;eacute;conomis&amp;eacute; de la CPU, l&amp;agrave; on s'occupe de la RAM!). Sans compter que si la partie serveur ne maintient plus d'&amp;eacute;tat, n'importe quelle instance pourra servir n'importe quelle requ&amp;ecirc;te... Nous parlons donc de conception Stateless (buzzword #2), permettant de d&amp;eacute;ployer les noeuds en ayant aucun autre souci que la r&amp;eacute;partition de charge (pas de synchronisation entre les noeuds), m'amenant tout doucement vers le 3&amp;egrave;me buzzword, la scalabilit&amp;eacute; horizontale.&lt;/li&gt; 
 &lt;/ul&gt; 
 &lt;br /&gt;En r&amp;eacute;fl&amp;eacute;chissant, si la traditionnelle redirection vers le formulaire de login ne semble pas &amp;ecirc;tre une option adapt&amp;eacute;e, que reste-t-il? Facile: le protocole HTTP pr&amp;eacute;voit au moins deux codes de retour li&amp;eacute;s aux probl&amp;egrave;mes de contr&amp;ocirc;les d'acc&amp;egrave;s: 401, authentification requise, et 403, authentification refus&amp;eacute;e. Parfait, le premier m'explique que je dois pr&amp;eacute;senter mes papiers et le second me signale que l'authentification fournie ne comprend pas l'accr&amp;eacute;ditation n&amp;eacute;cessaire pour acc&amp;eacute;der &amp;agrave; la ressource demand&amp;eacute;e. 
 &lt;br /&gt; 
 &lt;br /&gt;Donc me voil&amp;agrave; parti sur Google avec les mots clefs &amp;quot;Angular authentication 401&amp;quot; et je tombe sur un article fort int&amp;eacute;ressant: 
 &lt;a href=&quot;http://www.espeo.pl/2012/02/26/authentication-in-angularjs-application&quot;&gt;http://www.espeo.pl/2012/02/26/authentication-in-angularjs-application&lt;/a&gt; . La d&amp;eacute;monstration est compl&amp;egrave;te: toutes les requ&amp;ecirc;tes tenues en &amp;eacute;chec suite &amp;agrave; une erreur 401 sont bufferis&amp;eacute;es, en attente de la connexion de l'utilisateur et retent&amp;eacute;es le cas &amp;eacute;ch&amp;eacute;ant. Et si on veut quelque chose de plus basique? Un peu plus newbie? Genre une redirection vers un formulaire de login &amp;agrave; la premi&amp;egrave;re erreur 401 et une redirection a la racine suite &amp;agrave; authentification? C'est s&amp;ucirc;rement pas aussi complet, mais l'aspect na&amp;iuml;f permet de monter tranquillement en comp&amp;eacute;tence sur AngularJS. 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;a href=&quot;http://www.blogger.com/blogger.g?blogID=4336356511014175329&quot; name=&quot;showMeCode&quot;&gt; &lt;/a&gt;Avant toute chose, il nous faut un backend, mon choix c'est port&amp;eacute; sur Play 2.1-RC1 car: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Il est stateless par essence&lt;/li&gt; 
 &lt;li&gt;C'est hype, j'en avais envie et c'est moi le chef du blog (#noTroll)&lt;/li&gt; 
&lt;/ul&gt;Point de d&amp;eacute;part standard avec une application Play vide, ensuite on r&amp;eacute;cup&amp;egrave;re une partie de l'authentification du sample 
&lt;a href=&quot;https://github.com/playframework/Play20/tree/master/samples/scala/zentasks&quot;&gt;zentask&lt;/a&gt; en modifiant quelques aspects: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Tout d'abord, en cas de n&amp;eacute;cessit&amp;eacute; d'authentification, pas de redirection =&amp;gt; 401:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;pre class=&quot;brush:scala&quot;&gt;&amp;nbsp; private def onUnauthorized(request: RequestHeader) = Results.Redirect(routes.Application.login)&lt;br /&gt;&lt;/pre&gt;devient: 
&lt;br /&gt; 
&lt;pre class=&quot;brush:scala&quot;&gt;&amp;nbsp; private def onUnauthorized(request: RequestHeader) = Results.Unauthorized&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;La d&amp;eacute;monstration n&amp;eacute;cessite une ressource prot&amp;eacute;g&amp;eacute;e:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush: scala&quot;&gt;&amp;nbsp; def protectedResource = IsAuthenticated{&lt;br /&gt;&amp;nbsp; &amp;nbsp; username =&amp;gt; _ =&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; Ok(Json.obj(&amp;quot;test&amp;quot;-&amp;gt;&amp;quot;1234&amp;quot;))&lt;br /&gt;&amp;nbsp; }&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Comme on veut faire une application cliente qui se connecte &amp;agrave; un backend, pas d'utilisation des templates Play et modification de la route pour que la racine pointe sur une ressource statique:&lt;/li&gt; 
&lt;/ul&gt;GET &amp;nbsp; &amp;nbsp; / &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; controllers.Assets.at(path=&amp;quot;/public&amp;quot;, file=&amp;quot;index.html&amp;quot;) 
&lt;br /&gt; 
&lt;br /&gt;Le code est disponible 
&lt;a href=&quot;https://github.com/bleporini/angular-authent&quot;&gt;ici&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt;V&amp;eacute;rifications: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Pas autoris&amp;eacute;:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush: bash; gutter:false; &quot;&gt;$ curl http://localhost:9000/protectedResource -v&lt;br /&gt;* About to connect() to localhost port 9000 (#0)&lt;br /&gt;* &amp;nbsp; Trying ::1...&lt;br /&gt;* connected&lt;br /&gt;* Connected to localhost (::1) port 9000 (#0)&lt;br /&gt;&amp;gt; GET /protectedResource HTTP/1.1&lt;br /&gt;&amp;gt; User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5&lt;br /&gt;&amp;gt; Host: localhost:9000&lt;br /&gt;&amp;gt; Accept: */*&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;lt; HTTP/1.1 401 Unauthorized&lt;br /&gt;&amp;lt; Content-Length: 0&lt;br /&gt;&amp;lt;&lt;br /&gt;* Connection #0 to host localhost left intact&lt;br /&gt;* Closing connection #0&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt;L'application r&amp;eacute;fute bien l'acc&amp;egrave;s avec un code 401. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Authentification:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush: bash; gutter:false; &quot;&gt;$ curl http://localhost:9000/login -d 'mail=tony@stark.com&amp;amp;password=ironman' -v&lt;br /&gt;* About to connect() to localhost port 9000 (#0)&lt;br /&gt;* &amp;nbsp; Trying ::1...&lt;br /&gt;* connected&lt;br /&gt;* Connected to localhost (::1) port 9000 (#0)&lt;br /&gt;&amp;gt; POST /login HTTP/1.1&lt;br /&gt;&amp;gt; User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5&lt;br /&gt;&amp;gt; Host: localhost:9000&lt;br /&gt;&amp;gt; Accept: */*&lt;br /&gt;&amp;gt; Content-Length: 36&lt;br /&gt;&amp;gt; Content-Type: application/x-www-form-urlencoded&lt;br /&gt;&amp;gt;&lt;br /&gt;* upload completely sent off: 36 out of 36 bytes&lt;br /&gt;&amp;lt; HTTP/1.1 200 OK&lt;br /&gt;&amp;lt; Set-Cookie: PLAY_SESSION=1701c43b7f845bdde0e38c0f43705d54b6815977-mail%3Atony%40stark.com; Path=/; HTTPOnly&lt;br /&gt;&amp;lt; Content-Length: 0&lt;br /&gt;&amp;lt;&lt;br /&gt;* Connection #0 to host localhost left intact&lt;br /&gt;* Closing connection #0&lt;/pre&gt; 
&lt;pre class=&quot;brush: bash; gutter:false; &quot;&gt;&lt;/pre&gt;Code 200, un cookie sign&amp;eacute; de session en retour… tout va bien, donc on retente l'acc&amp;egrave;s &amp;agrave; la ressource prot&amp;eacute;g&amp;eacute;e en pr&amp;eacute;sentant le s&amp;eacute;same: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush: bash; gutter:false; &quot;&gt;$ curl http://localhost:9000/protectedResource -b &amp;quot;PLAY_SESSION=1701c43b7f845bdde0e38c0f43705d54b6815977-mail%3Atony%40stark.com&amp;quot; -v&lt;br /&gt;* About to connect() to localhost port 9000 (#0)&lt;br /&gt;* &amp;nbsp; Trying ::1...&lt;br /&gt;* connected&lt;br /&gt;* Connected to localhost (::1) port 9000 (#0)&lt;br /&gt;&amp;gt; GET /protectedResource HTTP/1.1&lt;br /&gt;&amp;gt; User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0 OpenSSL/0.9.8r zlib/1.2.5&lt;br /&gt;&amp;gt; Host: localhost:9000&lt;br /&gt;&amp;gt; Accept: */*&lt;br /&gt;&amp;gt; Cookie: PLAY_SESSION=1701c43b7f845bdde0e38c0f43705d54b6815977-mail%3Atony%40stark.com&lt;br /&gt;&amp;gt;&lt;br /&gt;&amp;lt; HTTP/1.1 200 OK&lt;br /&gt;&amp;lt; Content-Type: application/json; charset=utf-8&lt;br /&gt;&amp;lt; Content-Length: 15&lt;br /&gt;&amp;lt;&lt;br /&gt;* Connection #0 to host localhost left intact&lt;br /&gt;{&amp;quot;test&amp;quot;:&amp;quot;1234&amp;quot;}* Closing connection #0&lt;/pre&gt; 
&lt;br /&gt;On obtient donn&amp;eacute;e attendue, authentification r&amp;eacute;ussie! 
&lt;br /&gt; 
&lt;br /&gt;Maintenant je m'attaque au client: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush:html&quot;&gt;&amp;lt;html ng-app=&amp;quot;angularAuth&amp;quot; authenticator&amp;gt;&lt;br /&gt;&amp;lt;head&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;lt;title&amp;gt;Angular authent&amp;lt;/title&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/public/javascripts/angular/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/public/javascripts/angular/angular-resource.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/public/javascripts/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;/public/javascripts/controllers.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;br /&gt;&amp;lt;/head&amp;gt;&lt;br /&gt;&amp;lt;body&amp;gt;&lt;br /&gt;&amp;lt;h1&amp;gt;Simple authentication example&amp;lt;/h1&amp;gt;&lt;br /&gt;&amp;lt;div ng-view&amp;gt;&amp;lt;/div&amp;gt;&lt;br /&gt;&amp;lt;/body&amp;gt;&lt;br /&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt; 
&lt;br /&gt;Mon module AngularJS est sommaire: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush:js&quot;&gt;angular.module(&amp;quot;angularAuth&amp;quot;,['authServiceProvider']).&lt;br /&gt;&amp;nbsp; &amp;nbsp; config(['$routeProvider',function($routeProvider){&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $routeProvider.&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; when(&amp;quot;/&amp;quot;, {templateUrl:&amp;quot;public/partials/protectedContent.html&amp;quot;, controller:ProtectedCtrl}).&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; when(&amp;quot;/login&amp;quot;,{templateUrl:&amp;quot;public/partials/login.html&amp;quot;, controller:LoginCtrl}).&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; otherwise({redirectTo:&amp;quot;/&amp;quot;})&lt;br /&gt;&amp;nbsp; &amp;nbsp; }]).&lt;br /&gt;&amp;nbsp; &amp;nbsp; directive('authenticator',function($location){&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return function(scope, elem, attrs){&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; scope.$on('event:auth-loginRequired',function(){&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; $location.path(&amp;quot;/login&amp;quot;)&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; })&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br /&gt;&amp;nbsp; &amp;nbsp; }) &amp;nbsp;;&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt;En gros, quand &amp;quot;/&amp;quot; est demand&amp;eacute;, affichage du template tirant la ressource prot&amp;eacute;g&amp;eacute;e et lorsque &amp;quot;/login&amp;quot; est demand&amp;eacute;, affichage du formulaire de login et redirection dans tous les autres cas. 
&lt;br /&gt;Ensuite un listener va &amp;ecirc;tre positionn&amp;eacute; afin de r&amp;eacute;agir &amp;agrave; l'&amp;eacute;v&amp;egrave;nement de demande d'authentification. L'utilisation de la directive permet de le placer au niveau du module, soit une fois pour toutes. Ne pas oublier de mentionner la directive dans le fichier html (moi, j'ai cherch&amp;eacute; un moment au d&amp;eacute;but :-D). 
&lt;br /&gt; 
&lt;br /&gt;Le concept pr&amp;eacute;sent&amp;eacute; par Witold Szczerba est de tirer parti de la possibilit&amp;eacute; de poser des intercepteurs sur le service $http, c'est ce que je vais faire mais de fa&amp;ccedil;on plus na&amp;iuml;ve dans le module &amp;quot;authServiceProvider&amp;quot; inject&amp;eacute; dans &amp;quot;angularAuth&amp;quot;: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush:js&quot;&gt;angular.module('authServiceProvider', []).&lt;br /&gt;    config(['$httpProvider', function($httpProvider) {&lt;br /&gt;&lt;br /&gt;    $httpProvider.responseInterceptors.push(function($q,$rootScope,$log){&lt;br /&gt;        function success(response) {&lt;br /&gt;//            $log.info(response)&lt;br /&gt;            return response&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        function error(response) {&lt;br /&gt;            if (response.status === 401) {&lt;br /&gt;                $log.error(&amp;quot;401!!!!&amp;quot;)&lt;br /&gt;                $rootScope.$broadcast('event:auth-loginRequired')&lt;br /&gt;            }&lt;br /&gt;            return $q.reject(response)&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        return function(promise) {&lt;br /&gt;            return promise.then(success, error)&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;    })&lt;br /&gt;&lt;br /&gt;}])&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt;La fonction: si une requ&amp;ecirc;te retourne une erreur 401, alors l'&amp;eacute;v&amp;egrave;nement de demande d'authentification est propag&amp;eacute; et stimule ainsi la directive et le formulaire de login appara&amp;icirc;t. Je vous &amp;eacute;pargne un couplet sur l'API Promise d'AngularJS et cous encourage &amp;agrave; aller consulter le Reference Guide. 
&lt;br /&gt; 
&lt;br /&gt;Les contr&amp;ocirc;leurs du 
&lt;a href=&quot;https://github.com/bleporini/angular-authent/blob/master/public/javascripts/controllers.js&quot;&gt;formulaire d'authentification, de r&amp;eacute;cup&amp;eacute;ration de la ressource prot&amp;eacute;g&amp;eacute;e&lt;/a&gt; et les 
&lt;a href=&quot;https://github.com/bleporini/angular-authent/tree/master/public/partials&quot;&gt;templates associ&amp;eacute;s&lt;/a&gt; sont spartiates et consultables sur GitHub. 
&lt;br /&gt; 
&lt;br /&gt;En introduction, j'ai pr&amp;eacute;sent&amp;eacute; les arguments li&amp;eacute;s &amp;agrave; la rationalisation de l'infrastructure d'h&amp;eacute;bergement, en revanche &amp;agrave; l'heure actuelle il est clair que la charge de d&amp;eacute;veloppement est sup&amp;eacute;rieure compar&amp;eacute;e &amp;agrave; une application dans laquelle les vues sont g&amp;eacute;n&amp;eacute;r&amp;eacute;es par le serveur: on y d&amp;eacute;clare simplement l'emplacement du formulaire de login. 
&lt;br /&gt; 
&lt;br /&gt;La d&amp;eacute;mo est testable sur 
&lt;a href=&quot;http://powerful-reaches-3109.herokuapp.com/&quot;&gt;Heroku&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;
</description>
                <link>http://username.github.io/2013/01/06/AngularJS%2B%252B%2BPlay%2521%2BFramework%253A%2BAuthentification</link>
                <guid>http://username.github.io/2013/01/06/AngularJS+%2B+Play%21+Framework%3A+Authentification</guid>
                <pubDate>2013-01-06T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Taille de session HTTP</title>
                <description>
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt; 
 &lt;br /&gt; 
&lt;/div&gt;Jusqu'ici pour d&amp;eacute;terminer la taille d'une session HTTP, j'utilisais Memory Analyzer Tool: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Acquisition de heap dump&lt;/li&gt; 
 &lt;li&gt;Ouverture de la vue histogramme&lt;/li&gt; 
 &lt;li&gt;Recherche de l'impl&amp;eacute;mentation de la session: pour Tomcat c'est org.apache.catalina.session.StandardSession.&lt;/li&gt; 
 &lt;li&gt;Clic droit sur la classe : List Objects / with outgoing references:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt; 
 &lt;a href=&quot;http://1.bp.blogspot.com/-WEzmHJOcDd8/UIuJsXjddjI/AAAAAAAAAkY/Lm-XYxG7Mzs/s1600/Capture+d%E2%80%99e%CC%81cran+2012-10-27+a%CC%80+09.12.23.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;155&quot; src=&quot;/assets/img/Taille+de+session+HTTP/Capture+decran+2012-10-27+a+09.12.23.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt;Et l&amp;agrave; j'obtiens une vue contenant toutes les sessions et surtout le graal la valeur Retained Heap: 
&lt;br /&gt; 
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt; 
 &lt;a href=&quot;http://4.bp.blogspot.com/-LM0qM1GTZqE/UIuKdusfPmI/AAAAAAAAAkg/-ty3_2xDros/s1600/Capture+d%E2%80%99e%CC%81cran+2012-10-27+a%CC%80+09.12.56.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;76&quot; src=&quot;/assets/img/Taille+de+session+HTTP/Capture+decran+2012-10-27+a+09.12.56.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;div style=&quot;text-align: justify;&quot;&gt;
  Alors, &amp;ccedil;a permet d'obtenir l'information mais il faut reconna&amp;icirc;tre que MAT est assez lent pour parser les dumps, y compris sur mon Core i7 4 coeurs, 8Go, SSD, 48 soupapes, double vanos et pot Polini custom... Donc quand on veut conna&amp;icirc;tre l'impact d'un clic sur la session, c'est pas terrible en terme d'efficacit&amp;eacute;. 
&lt;/div&gt; 
&lt;div style=&quot;text-align: justify;&quot;&gt;
  J'ai trouv&amp;eacute; un peu plus rapide avec VisualVM: 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;G&amp;eacute;n&amp;eacute;ration du dump:&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt; 
 &lt;a href=&quot;http://2.bp.blogspot.com/-RUUy7zTiy5A/UIuN9F7_JtI/AAAAAAAAAkw/w55HoV-wqO4/s1600/Capture+d%E2%80%99e%CC%81cran+2012-10-27+a%CC%80+09.30.16.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;258&quot; src=&quot;/assets/img/Taille+de+session+HTTP/Capture+decran+2012-10-27+a+09.30.16.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: justify;&quot;&gt;&lt;/div&gt; 
&lt;ul&gt; 
 &lt;li&gt;Ouverture de la console OQL et ex&amp;eacute;cution de la requ&amp;ecirc;te 'select rsizeof(s) from org.apache.catalina.session.StandardSession s', rsizeof &amp;eacute;tant la fonction permettant de calculer la retained size :&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div style=&quot;text-align: center;&quot;&gt; 
 &lt;a href=&quot;http://2.bp.blogspot.com/-DUAKO-GNPJA/UIuOsUFW_EI/AAAAAAAAAk4/uVipGXLnDDg/s1600/Capture+d%E2%80%99e%CC%81cran+2012-10-27+a%CC%80+09.34.39.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;140&quot; src=&quot;/assets/img/Taille+de+session+HTTP/Capture+decran+2012-10-27+a+09.34.39.png&quot; width=&quot;320&quot; /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;div style=&quot;text-align: justify;&quot;&gt;
  On peut utiliser aussi 
 &lt;a href=&quot;http://messadmin.sourceforge.net/&quot;&gt;MessAdmin&lt;/a&gt; pour obtenir l'information directement, mais l&amp;agrave; j'avais pas envie de faire l'installation. 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;br /&gt;
</description>
                <link>http://username.github.io/2012/10/27/Taille%2Bde%2Bsession%2BHTTP</link>
                <guid>http://username.github.io/2012/10/27/Taille+de+session+HTTP</guid>
                <pubDate>2012-10-27T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Java et VMWare</title>
                <description>
Les best practices pour virtualiser des applications java dans VMWare:&amp;nbsp; 
&lt;a href=&quot;http://kb.vmware.com/selfservice/microsites/search.do?cmd=displayKC&amp;amp;externalId=1008480&quot;&gt;http://kb.vmware.com/selfservice/microsites/search.do?cmd=displayKC&amp;amp;externalId=1008480&lt;/a&gt;
</description>
                <link>http://username.github.io/2012/08/10/Java%2Bet%2BVMWare</link>
                <guid>http://username.github.io/2012/08/10/Java+et+VMWare</guid>
                <pubDate>2012-08-10T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>JPA, Hibernate et requête constructeur</title>
                <description>
La spec JPA pr&amp;eacute;voit la possibilit&amp;eacute; de construire des POJO (non entit&amp;eacute;) &amp;agrave; l'int&amp;eacute;rieur de requ&amp;ecirc;tes JPQL (4.8.2 de la JSR317), ce qui s'av&amp;eacute;rer pratique pour requ&amp;ecirc;ter et construire des DTO en une &amp;eacute;tape. Je ne m'en prive donc pas : 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush:java&quot;&gt;TypedQuery&amp;lt;hoteldto&amp;gt; query =&amp;nbsp;&lt;br /&gt;     em.createQuery(&amp;quot;select  new org.blep.poc.hcq.HotelDto(h) from Hotel h&amp;quot;,&lt;br /&gt;     HotelDto.class);&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;div&gt;
  Et ph&amp;eacute;nom&amp;egrave;ne surprenant, en parcourant la liste de r&amp;eacute;sultats, je m'aper&amp;ccedil;ois que les entit&amp;eacute;s identifi&amp;eacute;es dans une premi&amp;egrave;re requ&amp;ecirc;te et sont remont&amp;eacute;es unitairement : 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;pre class=&quot;brush:sql&quot;&gt;Hibernate: /* select &amp;nbsp;new org.blep.poc.hcq.HotelDto(h) from Hotel h */&lt;br /&gt;&amp;nbsp; &amp;nbsp;select hotel0_.id as col_0_0_ from Hotel hotel0_&lt;br /&gt;Hibernate: /* load org.blep.poc.hcq.Hotel */&lt;br /&gt;&amp;nbsp; select hotel0_.id as id0_0_, hotel0_.address as address0_0_, hotel0_.city as city0_0_, hotel0_.name as name0_0_, hotel0_.price as price0_0_, hotel0_.state as state0_0_ from Hotel hotel0_ where hotel0_.id=?&lt;/pre&gt; 
 &lt;br /&gt; 
 &lt;br /&gt;Je me retrouve donc avec (nombre d'entit&amp;eacute;s selectionn&amp;eacute;es + 1) requ&amp;ecirc;tes soumises &amp;agrave; la BDD (une requ&amp;ecirc;te de surface - shallow query- et les requ&amp;ecirc;tes de chargement), ce qui peut vite devenir un frein pour les performances. 
 &lt;br /&gt; 
 &lt;br /&gt;La doc Hibernate est plus que succincte sur le sujet des &amp;quot;constructor expressions&amp;quot;, en gros c'est support&amp;eacute; mais il n'y a pas plus d'info qui explique ce comportement. Si la doc n'aide pas, il reste les retours d'exp&amp;eacute;riences des autres utilisateurs dans les forums ou les blogs et en dernier lieu les bugs... &amp;nbsp;En fouinant un peu je trouve&amp;nbsp; 
 &lt;a href=&quot;https://hibernate.onjira.com/browse/HHH-544&quot;&gt;https://hibernate.onjira.com/browse/HHH-544&lt;/a&gt;&amp;nbsp;qui d&amp;eacute;crit parfaitement mon probl&amp;egrave;me et Sir GK Himself r&amp;eacute;pond en 2005: 
 &lt;br /&gt; 
 &lt;blockquote class=&quot;tr_bq&quot;&gt;
   &amp;nbsp;To be clear, all &amp;quot;select new&amp;quot; queries are considered &amp;quot;shallow&amp;quot; by the parser. 
 &lt;/blockquote&gt;La date, statut de la JIRA et la r&amp;eacute;ponse ne permettent pas d'envisager la n&amp;eacute;gociation sur le sujet ni aucun tuning d'ailleurs pour influer sur le comportement! Il ne reste qu'une seule autre voie, la recherche des solutions de contournement... 
 &lt;br /&gt; 
 &lt;br /&gt;La premi&amp;egrave;re tent&amp;eacute;e est l'utilisation de l'API Criteria, je ne suis pas fan mais si &amp;ccedil;a marche, comme le code reste inscrit dans JPA, pourquoi pas: 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;pre class=&quot;brush:java&quot;&gt;CriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();&lt;br /&gt;CriteriaQuery&amp;lt;HotelDto&amp;gt; cq = criteriaBuilder.createQuery(HotelDto.class);&lt;br /&gt;Root&amp;lt;Hotel&amp;gt; from = cq.from(Hotel.class);&lt;br /&gt;cq.select(criteriaBuilder.construct(HotelDto.class, from));&lt;br /&gt;TypedQuery&amp;lt;HotelDto&amp;gt; query = em.createQuery(cq);&lt;br /&gt;&lt;/pre&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Rien que de le coder j'ai mal... mais en plus la sortie SQL montre que le Criteria est interpr&amp;eacute;t&amp;eacute; pour g&amp;eacute;n&amp;eacute;rer du JPQL (tiens d'ailleurs &amp;ccedil;a me donne une raison de plus de ne pas aimer cette API!): 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;pre class=&quot;brush:sql&quot;&gt;&lt;br /&gt;Hibernate: /* select new org.blep.poc.hcq.HotelDto(generatedAlias0) from Hotel as generatedAlias0 */ select hotel0_.id as col_0_0_ from Hotel hotel0_&lt;br /&gt;&lt;/pre&gt; 
 &lt;div&gt;
   Donc aucun int&amp;eacute;r&amp;ecirc;t puisque le comportement n'&amp;eacute;volue pas. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   La mort dans l'&amp;acirc;me je me r&amp;eacute;souds &amp;agrave; aller au del&amp;agrave; de JPA et &amp;agrave; m'adresser directement &amp;agrave; Hibernate et il existe effectivement un moyen de combler le besoin mais pas dans le cadre d'un constructeur: 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;pre class=&quot;brush:java&quot;&gt;Query query = em.createQuery(&amp;quot;select h as hotel from Hotel h&amp;quot;);&lt;br /&gt;org.hibernate.Query unwrapped = query.unwrap(org.hibernate.Query.class);&lt;br /&gt;unwrapped.setResultTransformer(Transformers.aliasToBean(HotelDto.class));&lt;br /&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Je sens d'ici les picotement dans les yeux de mon lecteur (un, c'est toute mon ambition en terme d'auditoire pour le moment!), toutefois les donn&amp;eacute;es sont obtenues en un seul SQL. Au rayon des contraintes, le DTO n'est pas peupl&amp;eacute; par le constructeur mais par mutateur, ce qui implique qu'il doit y avoir un constructeur sans argument et que le mutateur est li&amp;eacute; &amp;agrave; l'alias dans le JPQL (ie le DTO doit pr&amp;eacute;senter la m&amp;eacute;thode setHotel(Hotel). Le fait que le DTO puisse &amp;ecirc;tre construit sans argument ouvre la possibilit&amp;eacute; d'avoir un objet inconsistant, ce n'est pas souhaitable mais tellement fr&amp;eacute;quent...&amp;nbsp; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   Possibilit&amp;eacute; suivante, utiliser un impl&amp;eacute;mentation propre de Collection&amp;lt;HotelDto&amp;gt; encapsulant une Collection&amp;lt;Hotel&amp;gt; comme d&amp;eacute;l&amp;eacute;gu&amp;eacute;e (code disponible sur 
  &lt;a href=&quot;https://github.com/bleporini/JPA-Hibernate-shallow-constructor-query/blob/master/src/main/java/org/blep/poc/hcq/HotelDtoCollection.java&quot;&gt;https://github.com/bleporini/JPA-Hibernate-shallow-constructor-query/blob/master/src/main/java/org/blep/poc/hcq/HotelDtoCollection.java&lt;/a&gt;). Du coup le code devient: 
  &lt;br /&gt; 
  &lt;br /&gt; 
  &lt;pre class=&quot;brush:java&quot;&gt;&lt;br /&gt;HotelDtoCollection hotels = new HotelDtoCollection(em.createQuery(&amp;quot;select h from Hotel h&amp;quot;, Hotel.class).getResultList());&lt;/pre&gt; 
  &lt;br /&gt;C'est correct, ne n&amp;eacute;cessite pas de r&amp;eacute;v&amp;eacute;ler une impl&amp;eacute;mentation sous-jacente mais clairement &amp;ccedil;a fait pas mal de code boiler plate... Ca serait pas mal de trouver quelquechose de plus &amp;eacute;l&amp;eacute;gant. 
  &lt;br /&gt; 
  &lt;br /&gt;Donc voici la voie bas&amp;eacute;e sur Google Guava: 
  &lt;br /&gt; 
  &lt;br /&gt; 
  &lt;pre class=&quot;brush:java&quot;&gt;&lt;br /&gt;List&amp;lt;Hotel&amp;gt; resultList = em.createQuery(&amp;quot;select h from Hotel h&amp;quot;, Hotel.class).getResultList();&lt;br /&gt;List&amp;lt;HotelDto&amp;gt; dtos = Lists.transform(resultList, new Function&amp;lt;Hotel, HotelDto&amp;gt;() {&lt;br /&gt;&amp;nbsp; &amp;nbsp; public HotelDto apply(@Nullable Hotel input) {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return new HotelDto(input);&lt;br /&gt;&amp;nbsp; &amp;nbsp; }&lt;br /&gt;&lt;/pre&gt;}); 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt;
   C'est une possibilit&amp;eacute; aussi pertinente que celle de la collection d&amp;eacute;l&amp;eacute;gu&amp;eacute;e mais nettement plus concise, la doc stipule que la liste r&amp;eacute;sultante est peupl&amp;eacute;e tardivement, c'est parfait! 
  &lt;br /&gt; 
  &lt;br /&gt;C&amp;ocirc;t&amp;eacute; performances, pour une requ&amp;ecirc;te ramenant 100 entit&amp;eacute;s d'une base H2 embarqu&amp;eacute;e, la solution du transformateur Hibernate prend 23ms, la collection d&amp;eacute;l&amp;eacute;gu&amp;eacute;e 19ms et Guava 19ms sur mon poste. 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
 &lt;div&gt; 
  &lt;br /&gt; 
 &lt;/div&gt; 
&lt;/div&gt;
</description>
                <link>http://username.github.io/2012/03/16/JPA%252C%2BHibernate%2Bet%2Brequ%25C3%25AAte%2Bconstructeur</link>
                <guid>http://username.github.io/2012/03/16/JPA%2C+Hibernate+et+requ%C3%AAte+constructeur</guid>
                <pubDate>2012-03-16T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Création d'une mini PKI</title>
                <description>
Au moment d'ajouter la couche SSL &amp;agrave; une application web, vient toujours la m&amp;ecirc;me questions &amp;quot;Comment &amp;ccedil;a marche d&amp;eacute;j&amp;agrave;? Je l'ai d&amp;eacute;j&amp;agrave; fait il y a plusieurs ann&amp;eacute;es, je me suis pris la t&amp;ecirc;te mais je ne me rappelle plus comment!&amp;quot;... et je recommence &amp;agrave; z&amp;eacute;ro! Alors voici un lien pour cr&amp;eacute;er sa propre AC. 
&lt;br /&gt; 
&lt;br /&gt;A des fins de tests on cr&amp;eacute;&amp;eacute; souvent des certificats autosign&amp;eacute;s (self-signed) car c'est facile. Toutefois pour rendre le test plus proche de la situation r&amp;eacute;elle, il peu &amp;ecirc;tre interressant de travailler avec des certificats qui sont sign&amp;eacute;s par une autorit&amp;eacute; de certification, mais comment cr&amp;eacute;er une autorit&amp;eacute; de certification??? R&amp;eacute;ponse sur&amp;nbsp; 
&lt;a href=&quot;http://artisan.karma-lab.net/node/1153&quot;&gt;http://artisan.karma-lab.net/node/1153&lt;/a&gt;&amp;nbsp;!
</description>
                <link>http://username.github.io/2011/05/19/Cr%25C3%25A9ation%2Bd%2527une%2Bmini%2BPKI</link>
                <guid>http://username.github.io/2011/05/19/Cr%C3%A9ation+d%27une+mini+PKI</guid>
                <pubDate>2011-05-19T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>MVP et GWT</title>
                <description>
J'ai trouv&amp;eacute; deux articles int&amp;eacute;ressants sur le pattern MVP sur ce blog: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;a href=&quot;http://www.mikaelkrok.net/le-design-pattern-mvp-et-gwt-1-introduction&quot;&gt;http://www.mikaelkrok.net/le-design-pattern-mvp-et-gwt-1-introduction&lt;/a&gt; 
&lt;br /&gt; 
&lt;br /&gt;et 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;a href=&quot;http://www.mikaelkrok.net/le-design-pattern-mvp-et-gwt-2-mvp-en-detail&quot;&gt;http://www.mikaelkrok.net/le-design-pattern-mvp-et-gwt-2-mvp-en-detail&lt;/a&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;Et voil&amp;agrave; comment on fait un billet marque page!
</description>
                <link>http://username.github.io/2011/02/26/MVP%2Bet%2BGWT</link>
                <guid>http://username.github.io/2011/02/26/MVP+et+GWT</guid>
                <pubDate>2011-02-26T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Message Driven Bean&#58; configuration de l'accès à une Destination sécurisée</title>
                <description>
&lt;br /&gt; 
&lt;br /&gt;Pour des besoins &amp;eacute;vidents, on m'a demand&amp;eacute; de s&amp;eacute;curiser l'acc&amp;egrave;s aux Destinations JMS (Queue/Topic), c'est &amp;agrave; dire les composants doivent s'authentifier pour pouvoir publier ou consommer des &amp;nbsp;message. 
&lt;br /&gt;Quand la connexion est cr&amp;eacute;&amp;eacute;e programmatiquement, pas de soucis: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush:java&quot;&gt;connectionFactory.createConnection(jmsUserName, jmsPassword);&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt;Toutefois, la question s'est pos&amp;eacute;e lorsque j'ai du d&amp;eacute;ployer un MDB et apr&amp;egrave;s avoir fouill&amp;eacute; dans la JSR EJB spec 3.1, je n'ai pas trouv&amp;eacute; comment indiquer dans les&amp;nbsp;m&amp;eacute;ta&amp;nbsp;donn&amp;eacute;es les valeurs user et password. Puis en &amp;eacute;largissant le champ de mes recherches avec Google, je suis tomb&amp;eacute; sur la config suivante qui r&amp;eacute;pond au besoin: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush:java&quot;&gt;@MessageDriven(activationConfig = {&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;user&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;mdbuser&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;password&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;mdbpassword&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;acknowledgeMode&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;Auto-acknowledge&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;destinationType&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;javax.jms.Queue&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;destination&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;/queue/myQueue&amp;quot;)&lt;br /&gt;})&lt;br /&gt;public class MyMDB implements MessageListener {&lt;br /&gt;&lt;/pre&gt;D'accord, c'&amp;eacute;tait quasi-&amp;eacute;vident... mais comme je trouve que &amp;ccedil;a manque un peu de documentation, je remets une couche!
</description>
                <link>http://username.github.io/2011/02/18/Message%2BDriven%2BBean%253A%2Bconfiguration%2Bde%2Bl%2527acc%25C3%25A8s%2B%25C3%25A0%2Bune%2BDestination%2Bs%25C3%25A9curis%25C3%25A9e</link>
                <guid>http://username.github.io/2011/02/18/Message+Driven+Bean%3A+configuration+de+l%27acc%C3%A8s+%C3%A0+une+Destination+s%C3%A9curis%C3%A9e</guid>
                <pubDate>2011-02-18T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>MDB&#58; utiliser des EJB sécurisés</title>
                <description>
&lt;br /&gt;Allez encore un petit billet sur la s&amp;eacute;curit&amp;eacute; et les MDB. 
&lt;br /&gt;Lorsqu'un MDB re&amp;ccedil;oit un message, il peut arriver (et m&amp;ecirc;me dans la plupart des cas!) qu'il doive consommer des services qui sont expos&amp;eacute;s par d'autres EJB. Supposons que l'EJB en question comprenne un contr&amp;ocirc;le d'acc&amp;egrave;s sur ses m&amp;eacute;thodes: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush:java&quot;&gt;&lt;br /&gt;@Stateless&lt;br /&gt;@Local(LocalMyService.class)&lt;br /&gt;@DeclareRoles(&amp;quot;authenticated&amp;quot;)&lt;br /&gt;@RolesAllowed(&amp;quot;authenticated&amp;quot;)&lt;br /&gt;public class MyServiceImpl implements LocalMyService {&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;br /&gt;... et que ce service est inject&amp;eacute; dans un MDB: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;pre class=&quot;brush:java&quot;&gt;&lt;br /&gt;@MessageDriven(activationConfig = {&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;user&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;mdbuser&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;password&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;mdbpassword&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;acknowledgeMode&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;Auto-acknowledge&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;destinationType&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;javax.jms.Queue&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;destination&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;/queue/myQueue&amp;quot;)&lt;br /&gt;})&lt;br /&gt;public class MyMDB implements MessageListener {&lt;br /&gt;    @EJB&lt;br /&gt;    private LocalMyService service;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onMessage(Message message) {&lt;br /&gt;             [...]&lt;br /&gt;             service.myMethod();&lt;/pre&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  L&amp;agrave; l'affaire se corse car les messages JMS n'embarquent pas de contexte de s&amp;eacute;curit&amp;eacute; (apr&amp;egrave;s recherche et sauf erreur de ma part), et lors de la r&amp;eacute;ception d'un message le MDB se verra l'acc&amp;egrave;s refus&amp;eacute; au service. Et bien c'est 
 &lt;i&gt;&lt;b&gt;presque &lt;/b&gt;&lt;/i&gt;pas grave, car la spec EJB couvre ce probl&amp;egrave;me et permet la substitution de r&amp;ocirc;le avec l'annotation javax.annotation.security.@RunAs qui prend en param&amp;egrave;tre le nom du r&amp;ocirc;le &amp;agrave; donner au bean (ici le MDB): 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
 &lt;pre class=&quot;brush:java&quot;&gt;@MessageDriven(activationConfig = {&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;user&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;mdbuser&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;password&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;mdbpassword&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;acknowledgeMode&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;Auto-acknowledge&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;destinationType&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;javax.jms.Queue&amp;quot;),&lt;br /&gt;        @ActivationConfigProperty(propertyName = &amp;quot;destination&amp;quot;,&lt;br /&gt;                propertyValue = &amp;quot;/queue/myQueue&amp;quot;)&lt;br /&gt;})&lt;br /&gt;@RunAs(&amp;quot;authenticated&amp;quot;)&lt;br /&gt;public class MyMDB implements MessageListener {&lt;br /&gt;    @EJB&lt;br /&gt;    private LocalMyService service;&lt;br /&gt;&lt;br /&gt;    @Override&lt;br /&gt;    public void onMessage(Message message) {&lt;br /&gt;             [...]&lt;br /&gt;             service.myMethod();&lt;/pre&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  Il est int&amp;eacute;ressant de noter que j'ai &amp;eacute;crit &amp;quot; 
 &lt;b&gt;&lt;i&gt;presque &lt;/i&gt;&lt;/b&gt;pas grave&amp;quot;! Presque, car le conteneur JEE s&amp;eacute;lectionn&amp;eacute; pour le projet en question &amp;eacute;tait JBoss 6.0.0.Final qui est directement impact&amp;eacute; par le bug&amp;nbsp; 
 &lt;a href=&quot;https://issues.jboss.org/browse/EJBTHREE-1945&quot;&gt;EJBTHREE-1945&lt;/a&gt;. Le sujet de bug est que le r&amp;ocirc;le est correctement substitu&amp;eacute; dans le premier appel de m&amp;eacute;thode s&amp;eacute;curis&amp;eacute;, mais si cette m&amp;eacute;thode fait elle-m&amp;ecirc;me appel &amp;agrave; une autre m&amp;eacute;thode s&amp;eacute;curis&amp;eacute;e , le r&amp;ocirc;le est perdu... autant dire que tout l'int&amp;eacute;r&amp;ecirc;t de RunAs est caduque!&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  J'ai donc demand&amp;eacute; s'il existait un moyen de contournement et je me suis inspir&amp;eacute; de la r&amp;eacute;ponse pour mon besoin en cr&amp;eacute;ant un intercepteur assign&amp;eacute; au MDB qui authentifie le MDB avant l'invocation de la m&amp;eacute;thode onMessage: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: monospace;&quot;&gt;&lt;/span&gt; 
 &lt;br /&gt; 
 &lt;pre class=&quot;brush:java&quot;&gt;public class RunAsInterceptor {&lt;br /&gt;    @AroundInvoke&lt;br /&gt;    public Object intercept(InvocationContext ctx) throws Throwable {&lt;br /&gt;        SecurityClient securityClient = null;&lt;br /&gt;&lt;br /&gt;        try {&lt;br /&gt;            securityClient = SecurityClientFactory.getSecurityClient();&lt;br /&gt;            securityClient.setSimple(userName, password);&lt;br /&gt;            securityClient.login();&lt;br /&gt;&lt;br /&gt;            return ctx.proceed();&lt;br /&gt;&lt;br /&gt;        } finally {&lt;br /&gt;            if (securityClient != null) {&lt;br /&gt;                securityClient.logout();&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  L'ombre au tableau est qu'une classe hors spec JEE issue de l'API propre &amp;agrave; JBoss est impliqu&amp;eacute;e (SecurityClient), je n'ai pas pouss&amp;eacute; pour trouver un moyen d'authentification avec les outils JEE stricts, si quelqu'un a &amp;ccedil;a en stock, je suis preneur! Je vous laisse le soin de d&amp;eacute;finir comment param&amp;eacute;trer userName et password, moi je l'ai fait avec le chargement de propri&amp;eacute;t&amp;eacute;s dans le constructeur sans arguments.&amp;nbsp; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt;
  L'utilisation dans le MDB: 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;div&gt; 
 &lt;pre class=&quot;brush:java&quot;&gt;@MessageDriven(activationConfig = {&lt;br /&gt;[...]&lt;br /&gt;})&lt;br /&gt;@Interceptors({RunAsInterceptor.class})&lt;br /&gt;public class MyMDB implements MessageListener {&lt;/pre&gt; 
&lt;/div&gt; 
&lt;br /&gt;L'avantage de cette conception est que lorsque les gens de JBoss se d&amp;eacute;cideront &amp;agrave; r&amp;eacute;soudre ce probl&amp;egrave;me qui date de 2009, il n'y aura qu'&amp;agrave; d&amp;eacute;gager l'intercepteur et le remplacer par @Runas! 
&lt;br /&gt; 
&lt;br /&gt;Mais bon, c'est la tour de Babel!
</description>
                <link>http://username.github.io/2011/02/18/MDB%253A%2Butiliser%2Bdes%2BEJB%2Bs%25C3%25A9curis%25C3%25A9s</link>
                <guid>http://username.github.io/2011/02/18/MDB%3A+utiliser+des+EJB+s%C3%A9curis%C3%A9s</guid>
                <pubDate>2011-02-18T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Aspirer un site avec wget</title>
                <description>
Ce matin je voulais pouvoir acc&amp;eacute;der &amp;agrave; la documentation GWT offline, mais Google ne propose pas cette option, alors j'ai essay&amp;eacute; de r&amp;eacute;cup&amp;eacute;rer le maximum d'informations avec wget. 
&lt;br /&gt; 
&lt;br /&gt;Voici les options que j'ai choisi et pourquoi je les ai choisies: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;$ wget -nc -k -q -r -p -L -R community.html http://code.google.com/webtoolkit/doc/latest/&lt;/span&gt; 
&lt;br /&gt; 
&lt;br /&gt;-nc: no clobber: pour que chaque ressource ne soit t&amp;eacute;l&amp;eacute;charg&amp;eacute;e qu'une seule fois 
&lt;br /&gt;-k : pour que les liens soient transform&amp;eacute;s en liens locaux de mani&amp;egrave;re &amp;agrave; faciliter la consultation locale 
&lt;br /&gt;-q : pour que l'affichage sur la console ne prenne pas plus de temps que le t&amp;eacute;l&amp;eacute;chargement lui m&amp;ecirc;me! 
&lt;br /&gt;-p : pour que toutes les ressources n&amp;eacute;cessaire &amp;agrave; chaque page soit &amp;eacute;galement t&amp;eacute;l&amp;eacute;charg&amp;eacute;es 
&lt;br /&gt;-L: pour &amp;eacute;viter de t&amp;eacute;l&amp;eacute;charger tout Internet 
&lt;br /&gt;-R: je ne voulais pas community car j'avais peur de t&amp;eacute;l&amp;eacute;charger tout le forum! 
&lt;br /&gt;-r : recursive... of course 
&lt;br /&gt; 
&lt;br /&gt;Voil&amp;agrave;, c'est une note de coin de table, n'h&amp;eacute;sitez pas &amp;agrave; apporter des pr&amp;eacute;cisions si elle vous semble incompl&amp;egrave;te.
</description>
                <link>http://username.github.io/2011/02/10/Aspirer%2Bun%2Bsite%2Bavec%2Bwget</link>
                <guid>http://username.github.io/2011/02/10/Aspirer+un+site+avec+wget</guid>
                <pubDate>2011-02-10T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Maven Surefire&#58; Lancer un seul test</title>
                <description>
Il est parfois fastidieux d'avoir &amp;agrave; lancer l'int&amp;eacute;gralit&amp;eacute; des tests d'un projet ou module maven si on a besoin d'en lancer un seul. Pour &amp;eacute;viter cela on peut indiquer &amp;agrave; surefire quel test ex&amp;eacute;cuter: 
&lt;br /&gt; 
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #eeeeee; font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt; 
&lt;br /&gt; 
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #eeeeee; font-family: 'Courier New', Courier, monospace;&quot;&gt;$&amp;nbsp;mvn test -Dtest=OnlyMe&lt;/span&gt; 
&lt;br /&gt; 
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #eeeeee; font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt; 
&lt;br /&gt;On notera &amp;eacute;galement qu'il n'est pas n&amp;eacute;cessaire d'utiliser le &amp;quot;Fully qualified name&amp;quot; de la classe de test, le nom de la classe est suffisant. 
&lt;br /&gt; 
&lt;br /&gt;Plus d'infos: &amp;nbsp; 
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/single-test.html&quot;&gt;http://maven.apache.org/plugins/maven-surefire-plugin/examples/single-test.html&lt;/a&gt; 
&lt;br /&gt; 
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html#test&quot;&gt;http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html#test&lt;/a&gt;
</description>
                <link>http://username.github.io/2011/01/31/Maven%2BSurefire%253A%2BLancer%2Bun%2Bseul%2Btest</link>
                <guid>http://username.github.io/2011/01/31/Maven+Surefire%3A+Lancer+un+seul+test</guid>
                <pubDate>2011-01-31T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Hibernate&#58; valeur des paramètres et log</title>
                <description>
Toujours gal&amp;egrave;re de d'analyser les logs d'une appli utilisant Hibernate car les requ&amp;ecirc;tes sont param&amp;eacute;tr&amp;eacute;es (heureusement) et les param&amp;egrave;tres ne sont pas directement accessible (on voit des '?' en lieu et place des valeurs dans les clause where). 
&lt;br /&gt; 
&lt;br /&gt;Pour y rem&amp;eacute;dier, rien de plus simple, il faut activer les loggers d'Hibernate qui journalisent ces informations. Donc dans log4j.properties (ou sa version XML), placer la directive suivante: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;log4j.category.org.hibernate.type.descriptor.sql=TRACE&lt;/span&gt;&lt;/span&gt; 
&lt;br /&gt; 
&lt;br /&gt;Cela permettra de trouver dans les logs les messages suivants pour chaque requ&amp;ecirc;te param&amp;eacute;tr&amp;eacute;e envoy&amp;eacute;e par Hibernate: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;4000 [main] TRACE org.hibernate.type.descriptor.sql.BasicBinder &amp;nbsp;- binding parameter [1] as [BIGINT] - 1295864313859&lt;/span&gt; 
&lt;br /&gt; 
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;4000 [main] TRACE org.hibernate.type.descriptor.sql.BasicBinder &amp;nbsp;- binding parameter [2] as [TIMESTAMP] - Mon Jan 24 11:18:33 CET 2011&lt;/span&gt; 
&lt;br /&gt; 
&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: #cccccc; font-family: 'Courier New', Courier, monospace;&quot;&gt;4000 [main] TRACE org.hibernate.type.descriptor.sql.BasicBinder &amp;nbsp;- binding parameter [3] as [BIGINT] - 1295864313843&lt;/span&gt;
</description>
                <link>http://username.github.io/2011/01/24/Hibernate%253A%2Bvaleur%2Bdes%2Bparam%25C3%25A8tres%2Bet%2Blog</link>
                <guid>http://username.github.io/2011/01/24/Hibernate%3A+valeur+des+param%C3%A8tres+et+log</guid>
                <pubDate>2011-01-24T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>Windows et les variables d'environnement</title>
                <description>
Un coup de gueule rapide un jour de r&amp;eacute;veillon! 
&lt;br /&gt; 
&lt;br /&gt;Comme tout d&amp;eacute;veloppeur JEE, la variable d'environnement PATH de WindowsXP contient %JAVA_HOME%\bin, jusque l&amp;agrave; tout va bien. 
&lt;br /&gt; 
&lt;br /&gt;Mais voil&amp;agrave; que je d&amp;eacute;cide de changer de version de JVM juste dans le contexte d'une console ligne de commande Windows et je repositionne donc %JAVA_HOME% sur l'install d'un autre SDK. Cependant, contrairement &amp;agrave; ce que j'escomptais, les variables d'environnement utilis&amp;eacute;es dans la d&amp;eacute;claration d'une autre variable ne sont pas &amp;eacute;valu&amp;eacute;es &amp;agrave; la vol&amp;eacute;e mais substitu&amp;eacute;es par leur valeur lors de l'instanciation!! 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div style=&quot;background-color:black;&quot;&gt; 
 &lt;br /&gt; 
 &lt;span style=&quot;color: rgb(255, 255, 255);font-size:85%;&quot;&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt;Z:\&amp;gt;set essai=helloWorld&lt;br /&gt;&lt;br /&gt;Z:\&amp;gt;echo %essai%&lt;br /&gt;helloWorld&lt;br /&gt;&lt;br /&gt;Z:\&amp;gt;set essai2=%essai%__2&lt;br /&gt;&lt;br /&gt;Z:\&amp;gt;echo %essai2%&lt;br /&gt;helloWorld__2&lt;br /&gt;&lt;br /&gt;Z:\&amp;gt;set essai=goodByeWorld&lt;br /&gt;&lt;br /&gt;Z:\&amp;gt;echo %essai%&lt;br /&gt;goodByeWorld&lt;br /&gt;&lt;br /&gt;Z:\&amp;gt;echo %essai2%&lt;br /&gt;helloWorld__2&lt;/span&gt;&lt;/span&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;br /&gt;Classe non??? 
&lt;br /&gt; 
&lt;br /&gt;Ca fait longtemps que je ne porte plus Windows et les produits &amp;quot;microsoftiens&amp;quot; dans mon coeur mais quand m&amp;ecirc;me, c'est vraiment pas un comportement digne d'un produit professionnel. 
&lt;br /&gt; 
&lt;br /&gt;Ce n'est s&amp;ucirc;rement pas une d&amp;eacute;couverte (sauf pour moi aujourd'hui), mais je trouve que &amp;ccedil;a m&amp;eacute;ritait le coup de gueule.
</description>
                <link>http://username.github.io/2008/12/24/Windows%2Bet%2Bles%2Bvariables%2Bd%2527environnement</link>
                <guid>http://username.github.io/2008/12/24/Windows+et+les+variables+d%27environnement</guid>
                <pubDate>2008-12-24T00:00:00+01:00</pubDate>
        </item>

        <item>
                <title>WebServices EJB 3&#58; Trop fastoche</title>
                <description>
Bon alors on va commencer par un petit tuto pour d&amp;eacute;velopper et publier un service web &amp;agrave; l'aide des possibilit&amp;eacute;s offertes par Java et les EJB 3, contrairement &amp;agrave; ce qui &amp;eacute;tait pr&amp;eacute;cedemment n&amp;eacute;cessaire, c'est tr&amp;egrave;s rapide et super facile... (ok &amp;ccedil;a fait un peu recette de cuisine) 
&lt;br /&gt; 
&lt;br /&gt;Pour rappel, au niveau de l'architecture, un conteneur d'application va h&amp;eacute;berger notre service et son impl&amp;eacute;mentation est assur&amp;eacute;e par un EJB sans etat (stateless). 
&lt;br /&gt; 
&lt;br /&gt;En ce qui concerne les pr&amp;eacute;-requis, vous devez vous assurer de disposer de: 
&lt;ul&gt; 
 &lt;li&gt;Le JDK dans sa version 1.5&lt;br /&gt;&lt;/li&gt; 
 &lt;li&gt; JBoss IDE 2 beta 2 (bon jamais la version stable??) disponible en bundle &lt;a href=&quot;http://prdownloads.sourceforge.net/jboss/JBossIDE-2.0.0.Beta2-Bundle-win32.zip?download&quot;&gt;ici&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;JBoss AS 4.2.0GA en t&amp;eacute;l&amp;eacute;chargement &lt;a href=&quot;http://sourceforge.net/project/showfiles.php?group_id=22866&amp;amp;package_id=16942&amp;amp;release_id=507793&quot;&gt;ici&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt;Une fois que tout est install&amp;eacute;, on va commencer par ouvrir JBoss IDE dans un workspace vierge et y int&amp;eacute;grer l'installation de JBoss AS: 
&lt;br /&gt; 
&lt;ol&gt; 
 &lt;li&gt;Ouvrir la perspective JBoss AS&lt;/li&gt; 
 &lt;li&gt;Dans la vue &amp;quot;JBoss Server&amp;quot; : clic droit -&amp;gt; New server&lt;/li&gt; 
 &lt;li&gt;S&amp;eacute;lectionner JBoss Inc/JBoss AS 4.0:&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://2.bp.blogspot.com/_f_XZMazgnJc/Rl_qc9iZ2gI/AAAAAAAAAJE/yZt4gxUG38I/s1600-h/wsjboss.jpg&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;&quot; src=&quot;/assets/img/WebServices+EJB+3+Trop+fastoche/wsjboss.jpg&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5071029488718567938&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Donner l'emplacement du serveur et s&amp;eacute;lectionner la configuration (default sera tr&amp;egrave;s bien pour notre tuto):&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://1.bp.blogspot.com/_f_XZMazgnJc/Rl_wTtiZ2hI/AAAAAAAAAJM/dPfldytp7QE/s1600-h/wsjboss2.jpg&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;&quot; src=&quot;/assets/img/WebServices+EJB+3+Trop+fastoche/wsjboss2.jpg&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5071035926874544658&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Dans la vue &amp;quot;JBoss Server&amp;quot; : clic droit sur le serveur cr&amp;eacute;&amp;eacute; et le lancer en debug, la sortie sur la console ne doit normalement pas contenir d'erreur et finir par:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;span style=&quot;font-family:courier new;&quot;&gt;12:08:14,062 INFO [Server] JBoss (MX MicroKernel) [4.2.0.GA (build: SVNTag=JBoss_4_2_0_GA date=200705111440)] Started in 47s:812ms&lt;/span&gt; 
&lt;br /&gt; 
&lt;ol start=&quot;6&quot;&gt; 
 &lt;li&gt;Cr&amp;eacute;ons maintenant notre projet. il s'agit d'un projet EJB 3.0/EJB 3.0 Project:&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://4.bp.blogspot.com/_f_XZMazgnJc/RmAQLNiZ2iI/AAAAAAAAAJU/TS0DZ8niVHA/s1600-h/wsjboss3.jpg&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;&quot; src=&quot;/assets/img/WebServices+EJB+3+Trop+fastoche/wsjboss3.jpg&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5071070965217745442&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt;S&amp;eacute;lectionner ensuite la configuration de serveur que nou avons pr&amp;eacute;c&amp;eacute;demment d&amp;eacute;fini (default). 
&lt;br /&gt; 
&lt;br /&gt;A la cr&amp;eacute;ation du projet, nous rencontron l'erreur (de jeunesse?) suivante: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&quot;font-size:85%;&quot;&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt;Severity and Description Path Resource Location Creation Time Id&lt;br /&gt;Project TestWS is missing required library: 'E:\j2ee\jboss-4.2.0.GA\server\default\deploy\ejb3.deployer\jboss-ejb3x.jar' TestWS Build path 1180700028078 24&lt;br /&gt;&lt;/span&gt;&lt;/span&gt; 
&lt;br /&gt;Ce qui signifie que le buildpath est configur&amp;eacute; pour trouver le fichier jboss-ejb3x.jar dans un r&amp;eacute;pertoire alors qu'il ne s'y trouve pas... Pas de panique, vous pouvez trouver le fuyard dans le r&amp;eacute;pertoire $JBOSS_HOME/server/default/lib. Une fois le jar manquant copi&amp;eacute; dans le r&amp;eacute;pertoire attendu, demander &amp;agrave; Eclipse de rafra&amp;icirc;chir le contenu du projet pour que la pr&amp;eacute;sence du fichier soit d&amp;eacute;tect&amp;eacute;e et l'erreur dispara&amp;icirc;t. 
&lt;br /&gt; 
&lt;ol start=&quot;7&quot;&gt; 
 &lt;li&gt;Afin que les biblioth&amp;egrave;ques n&amp;eacute;cessaires &amp;agrave; la cr&amp;eacute;ation de services web JBoss soient charg&amp;eacute;es, par un clic droit sur la racine du projet, faire appara&amp;icirc;tre le menu contextuel et cliquer sur JBossWS/Add JBossWS nature. Une bo&amp;icirc;te de dialogue appara&amp;icirc;t, les options par d&amp;eacute;faut conviennent &amp;agrave; notre exemple:&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://4.bp.blogspot.com/_f_XZMazgnJc/RmAVzNiZ2jI/AAAAAAAAAJc/8csagCKT9Ko/s1600-h/wsjboss4.jpg&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;&quot; src=&quot;/assets/img/WebServices+EJB+3+Trop+fastoche/wsjboss4.jpg&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5071077149970651698&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Cr&amp;eacute;ons maintenant une classe de base Hello dans le package org.tbt.wstuto:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;span style=&quot;color: rgb(160, 32, 240);font-family:courier new;font-size:85%;&quot;&gt;package&lt;/span&gt; 
&lt;span style=&quot;font-size:85%;&quot;&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt; org.tbt.wstuto;&lt;/span&gt;&lt;/span&gt; 
&lt;br /&gt; 
&lt;pre&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(46, 139, 87);&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(46, 139, 87);&quot;&gt;&lt;b&gt;class&lt;/b&gt;&lt;/span&gt; Hello {&lt;br /&gt;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt; 
&lt;ol start=&quot;9&quot;&gt; 
 &lt;li&gt;Maintenant, nous allons un peu l'agr&amp;eacute;menter en utilisant les annotations et en ajoutant une m&amp;eacute;thode pour notre service:&lt;/li&gt; 
&lt;/ol&gt; 
&lt;span style=&quot;color: rgb(160, 32, 240);font-family:courier new;font-size:85%;&quot;&gt;package&lt;/span&gt; 
&lt;span style=&quot;font-size:85%;&quot;&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt; org.tbt.wstuto;&lt;/span&gt;&lt;/span&gt; 
&lt;br /&gt; 
&lt;pre&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(160, 32, 240);&quot;&gt;import&lt;/span&gt; javax.ejb.Stateless;&lt;br /&gt;&lt;span style=&quot;color: rgb(160, 32, 240);&quot;&gt;import&lt;/span&gt; javax.jws.WebMethod;&lt;br /&gt;&lt;span style=&quot;color: rgb(160, 32, 240);&quot;&gt;import&lt;/span&gt; javax.jws.WebParam;&lt;br /&gt;&lt;span style=&quot;color: rgb(160, 32, 240);&quot;&gt;import&lt;/span&gt; javax.jws.WebService;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(160, 32, 240);&quot;&gt;@Stateless&lt;/span&gt;      &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;// C'est un EJB sans &amp;eacute;tat&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(160, 32, 240);&quot;&gt;@WebService&lt;/span&gt; &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt; // C'est un service Web&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(46, 139, 87);&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(46, 139, 87);&quot;&gt;&lt;b&gt;class&lt;/b&gt;&lt;/span&gt; Hello {&lt;br /&gt;&lt;span style=&quot;color: rgb(160, 32, 240);&quot;&gt;@WebMethod&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: rgb(46, 139, 87);&quot;&gt;&lt;b&gt;public&lt;/b&gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(46, 139, 87);&quot;&gt;&lt;b&gt;int&lt;/b&gt;&lt;/span&gt; world(&lt;span style=&quot;color: rgb(160, 32, 240);&quot;&gt;@WebParam&lt;/span&gt;(name=&lt;span style=&quot;color: rgb(255, 0, 255);&quot;&gt;&amp;quot;param&amp;quot;&lt;/span&gt;)&lt;span style=&quot;color: rgb(46, 139, 87);&quot;&gt;&lt;b&gt;int&lt;/b&gt;&lt;/span&gt; iParam){&lt;br /&gt;       &lt;span style=&quot;color: rgb(0, 0, 255);&quot;&gt;// Ca c'est sp&amp;eacute;ciale d&amp;eacute;dicace pour VLT!&lt;/span&gt;&lt;br /&gt;       System.out.println(&lt;span style=&quot;color: rgb(255, 0, 255);&quot;&gt;&amp;quot;Goodbye cruel world...&amp;quot;&lt;/span&gt;);&lt;br /&gt;       &lt;span style=&quot;color: rgb(128, 64, 64);&quot;&gt;&lt;b&gt;return&lt;/b&gt;&lt;/span&gt; &lt;span style=&quot;color: rgb(255, 0, 255);&quot;&gt;0&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt; 
&lt;br /&gt; 
&lt;ol start=&quot;10&quot;&gt; 
 &lt;li&gt;Nous allons maintenant configurer l'IDE pour cr&amp;eacute;er notre jar gr&amp;agrave;ce a la packaging configuration d&amp;eacute;finie comme suit:&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://3.bp.blogspot.com/_f_XZMazgnJc/RmAYh9iZ2kI/AAAAAAAAAJk/NGLYSQRoG0c/s1600-h/wsjboss5.jpg&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;&quot; src=&quot;/assets/img/WebServices+EJB+3+Trop+fastoche/wsjboss5.jpg&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5071080152152791618&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
 &lt;li&gt;Demander de cr&amp;eacute;er le package par la commande Project/Run packaging configuration et le jar appara&amp;icirc;t dans l'arborescence de votre projet.&lt;/li&gt; 
 &lt;li&gt;Reste maintenant &amp;agrave; d&amp;eacute;ployer votre service sur le conteneur: en perspective JBoss AS, faire glisser le jar sur notre serveur default dans la vue JBoss server afin de le faire appara&amp;icirc;tre dans les modules. Pour finir demander la publication du jar:&lt;a onblur=&quot;try {parent.deselectBloggerImageGracefully();} catch(e) {}&quot; href=&quot;http://2.bp.blogspot.com/_f_XZMazgnJc/RmAZ9tiZ2lI/AAAAAAAAAJs/sFvvOluty7M/s1600-h/wsjboss6.jpg&quot;&gt;&lt;img style=&quot;margin: 0px auto 10px; display: block; text-align: center; cursor: pointer;&quot; src=&quot;/assets/img/WebServices+EJB+3+Trop+fastoche/wsjboss6.jpg&quot; alt=&quot;&quot; id=&quot;BLOGGER_PHOTO_ID_5071081728405789266&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/li&gt; 
&lt;/ol&gt;Dans la console, devrait appara&amp;icirc;tre: 
&lt;br /&gt; 
&lt;span style=&quot;font-size:85%;&quot;&gt;&lt;span style=&quot;font-family:courier new;&quot;&gt;14:48:40,640 INFO [TomcatDeployer] deploy, ctxPath=/HelloService, warUrl=.../tmp/deploy/TestWS.jar-ws46100.war/&lt;br /&gt;14:48:41,109 INFO [JmxKernelAbstraction] creating wrapper delegate for: org.jboss.ejb3.stateless.StatelessContainer&lt;br /&gt;14:48:41,140 INFO [JmxKernelAbstraction] installing MBean: jboss.j2ee:jar=TestWS.jar,name=Hello,service=EJB3 with dependencies:&lt;br /&gt;14:48:41,625 INFO [EJBContainer] STARTED EJB: org.tbt.wstuto.Hello ejbName: Hello&lt;br /&gt;14:48:41,671 INFO [EJB3Deployer] Deployed: file:/E:/j2ee/jboss-4.2.0.GA/server/default/deploy/TestWS.jar&lt;br /&gt;14:48:41,703 INFO [WSDLFilePublisher] WSDL published to: file:/E:/j2ee/jboss-4.2.0.GA/server/default/data/wsdl/TestWS.jar/HelloService46098.wsdl&lt;br /&gt;14:48:41,781 INFO [ServiceEndpointManager] WebService started: http://localhost:8080/HelloService/Hello&lt;/span&gt;&lt;/span&gt; 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;br /&gt;Nous pouvons v&amp;eacute;rifier la pr&amp;eacute;sence de votre service gr&amp;agrave;ce &amp;agrave; JBoss WS 
&lt;a href=&quot;http://localhost:8080/jbossws/services&quot;&gt;http://localhost:8080/jbossws/services&lt;/a&gt; : 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div class=&quot;pageSection&quot;&gt; 
 &lt;fieldset&gt; 
  &lt;legend&gt;&lt;b&gt;Registered Service Endpoints&lt;/b&gt;&lt;/legend&gt; 
  &lt;table style=&quot;width: 528px; height: 165px;&quot;&gt; 
   &lt;tbody&gt; 
    &lt;tr&gt; 
     &lt;td&gt;ServiceEndpointID&lt;/td&gt; 
     &lt;td&gt;jboss.ws:context=HelloService,endpoint=Hello&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td&gt;ServiceEndpointAddress&lt;/td&gt; 
     &lt;td&gt;&lt;a href=&quot;http://localhost:8080/HelloService/Hello?wsdl&quot;&gt;http://localhost:8080/HelloService/Hello?wsdl&lt;/a&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td colspan=&quot;2&quot;&gt; 
      &lt;table class=&quot;metrics&quot;&gt; 
       &lt;tbody&gt; 
        &lt;tr&gt; 
         &lt;td&gt;StartTime&lt;/td&gt; 
         &lt;td&gt;StopTime&lt;/td&gt; 
         &lt;td&gt;&lt;br /&gt;&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
         &lt;td&gt;Fri Jun 01 14:48:41 CEST 2007&lt;/td&gt; 
         &lt;td&gt;&lt;br /&gt;&lt;/td&gt; 
         &lt;td&gt;&lt;br /&gt;&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
         &lt;td&gt;RequestCount&lt;/td&gt; 
         &lt;td&gt;ResponseCount&lt;/td&gt; 
         &lt;td&gt;FaultCount&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
         &lt;td&gt;0&lt;/td&gt; 
         &lt;td&gt;0&lt;/td&gt; 
         &lt;td&gt;0&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
         &lt;td&gt;MinProcessingTime&lt;/td&gt; 
         &lt;td&gt;MaxProcessingTime&lt;/td&gt; 
         &lt;td&gt;AvgProcessingTime&lt;/td&gt; 
        &lt;/tr&gt; 
        &lt;tr&gt; 
         &lt;td&gt;0&lt;/td&gt; 
         &lt;td&gt;0&lt;/td&gt; 
         &lt;td&gt;0&lt;/td&gt; 
        &lt;/tr&gt; 
       &lt;/tbody&gt; 
      &lt;/table&gt; &lt;/td&gt; 
    &lt;/tr&gt; 
    &lt;tr&gt; 
     &lt;td colspan=&quot;3&quot;&gt;&lt;br /&gt;&lt;/td&gt; 
    &lt;/tr&gt; 
   &lt;/tbody&gt; 
  &lt;/table&gt; 
 &lt;/fieldset&gt; 
&lt;/div&gt; 
&lt;br /&gt; 
&lt;h2&gt;Conclusion&lt;/h2&gt; 
&lt;br /&gt;C'est une bonne illustration de l'apport des annotations: nous &amp;eacute;conomisons ici l'&amp;eacute;criture d'un fichier WSDL, voire d'un fichier de d&amp;eacute;ploiement WSDD. Il n'est nullement besoin non plus d'empaqueter sous forme de war, donc pas non plus de web.xml! 
&lt;br /&gt; 
&lt;br /&gt;Trop facile... 
&lt;br /&gt; 
&lt;br /&gt;A noter n&amp;eacute;anmoins qu'il semble que le format de l'URL du service soit fig&amp;eacute;e &amp;agrave; http://hostname/ 
&lt;class name=&quot;&quot;&gt;
  Service/ 
 &lt;class name=&quot;&quot;&gt;
   , nous avons essay&amp;eacute; de param&amp;eacute;trer un peu dans tous les sens les annotations sans r&amp;eacute;sultat, si quelqu'un &amp;agrave; les moyens d'enrichir le billet &amp;agrave; ce sujet, n'h&amp;eacute;sitez pas... 
 &lt;/class&gt; 
&lt;/class&gt;
</description>
                <link>http://username.github.io/2007/06/01/WebServices%2BEJB%2B3%253A%2BTrop%2Bfastoche</link>
                <guid>http://username.github.io/2007/06/01/WebServices+EJB+3%3A+Trop+fastoche</guid>
                <pubDate>2007-06-01T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Premier</title>
                <description>
Le premier billet d'un blog qui a pour but de r&amp;eacute;pertorier toutes les m&amp;eacute;saventures rencontr&amp;eacute;es par des ing&amp;eacute;nieurs sp&amp;eacute;cialis&amp;eacute;s dans les nouvelles technologies de l'information (J2EE, Oracle, MySQL, Linux) pour mettre en oeuvre et int&amp;eacute;grer diff&amp;eacute;rents outils. Pourront &amp;eacute;galement figurer au programme des &amp;eacute;tudes comparatives men&amp;eacute;es dans le cadre des diff&amp;eacute;rents projets dans lesquels nous sommes intervenus. 
&lt;br /&gt; 
&lt;br /&gt;Pourquoi &amp;quot;The Babel Tower&amp;quot;? En hommage &amp;agrave; mon coll&amp;egrave;gue Vincent, architecte en syst&amp;egrave;mes d'informations de son &amp;eacute;tat, qui, s'exprimant sur les diff&amp;eacute;rents frameworks, recommandations et autres sp&amp;eacute;cifications, grom&amp;egrave;le de fa&amp;ccedil;on r&amp;eacute;guli&amp;egrave;re la remarque suivante: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;span style=&quot;font-size:130%;&quot;&gt;&lt;span style=&quot;font-size:180%;&quot;&gt;&amp;quot;Vraiment, c'est la Tour de Babel!&amp;quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;Vous cherchez un tuto simple qui vous permette de publier rapidement un service web et son client pour le consommer, c'est ce que que The Babel Tower va essayer de vous fournir... enfin d&amp;egrave;s que nous trouverons quelques minutes pour r&amp;eacute;diger ce billet!
</description>
                <link>http://username.github.io/2007/05/09/Premier</link>
                <guid>http://username.github.io/2007/05/09/Premier</guid>
                <pubDate>2007-05-09T00:00:00+02:00</pubDate>
        </item>


</channel>
</rss>
